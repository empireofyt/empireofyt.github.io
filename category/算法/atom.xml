<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://empireofyt.github.io</id>
    <title> • Posts by &#34;算法&#34; category</title>
    <link href="https://empireofyt.github.io" />
    <updated>2023-02-01T13:52:41.528Z</updated>
    <category term="算法" />
    <entry>
        <id>https://empireofyt.github.io/:computer-science/algorithm/BFS/</id>
        <title>BFS</title>
        <link rel="alternate" href="https://empireofyt.github.io/:computer-science/algorithm/BFS/"/>
        <content type="html">&lt;h2 id=&#34;一-应用场景&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一-应用场景&#34;&gt;#&lt;/a&gt; 一 应用场景&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;找到的路径一定是最短的&lt;/strong&gt;，但空间复杂度可能大于 DFS&lt;/p&gt;
&lt;h2 id=&#34;二-代码框架&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二-代码框架&#34;&gt;#&lt;/a&gt; 二 代码框架&lt;/h2&gt;
&lt;p&gt;``// 计算从起点 start 到终点 target 的最近距离`&lt;/p&gt;
&lt;p&gt;&lt;code&gt;int BFS(Node start, Node target) &amp;#123;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;​		  &lt;code&gt;queue&amp;lt;Node&amp;gt; q; // 核心数据结构&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;​		 &lt;code&gt;set&amp;lt;Node&amp;gt; visited; // 避免走回头路&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;​		 &lt;code&gt;q.push(start); // 将起点加入队列&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;​		 &lt;code&gt;visited.insert(start);  int step = 0; // 记录扩散的步数&lt;/code&gt; &lt;br&gt;
 &lt;code&gt;while (q not empty) &amp;#123;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;​	            &lt;code&gt;int sz = q.size();&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;​        &lt;code&gt;/* 将当前队列中的所有节点向四周扩散 */    *&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;	`for (int i = 0; i &amp;lt; sz; i++) &amp;#123;`      	
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​				 &lt;code&gt;Node cur = q.front();&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;​				  &lt;code&gt;q.pop();&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;/* 划重点：这里判断是否到达终点 */    *&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;​				 &lt;code&gt;if (cur is target)        return step;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;/* 将 cur 的相邻节点加入队列 */      *&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;​				 &lt;code&gt;for (Node x : cur.adj()) &amp;#123;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;​					  &lt;code&gt;if (x not in visited) &amp;#123;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;​								  &lt;code&gt;q.push(x);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;​								  &lt;code&gt;visited.insert(x);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;​     &lt;code&gt;/* 划重点：更新步数在这里 */&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;step++;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;#125;&lt;/code&gt;&lt;/p&gt;
</content>
        <category term="算法" />
        <updated>2023-02-01T13:52:41.528Z</updated>
    </entry>
</feed>
