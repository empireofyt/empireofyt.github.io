{
    "version": "https://jsonfeed.org/version/1",
    "title": "null",
    "description": "",
    "home_page_url": "https://empireofyt.github.io",
    "items": [
        {
            "id": "https://empireofyt.github.io/computer-science/cpp/heima/c++%E6%A0%B8%E5%BF%83--%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/",
            "url": "https://empireofyt.github.io/computer-science/cpp/heima/c++%E6%A0%B8%E5%BF%83--%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/",
            "title": "c++核心--职工管理系统",
            "date_published": "2023-02-02T13:13:58.158Z",
            "content_html": "",
            "tags": []
        },
        {
            "id": "https://empireofyt.github.io/computer-science/cpp/heima/c++%E6%A0%B8%E5%BF%83--%E5%BC%95%E7%94%A8/",
            "url": "https://empireofyt.github.io/computer-science/cpp/heima/c++%E6%A0%B8%E5%BF%83--%E5%BC%95%E7%94%A8/",
            "title": "c++核心--引用",
            "date_published": "2023-02-02T13:13:37.508Z",
            "content_html": "<h2 id=\"引用\"><a class=\"markdownIt-Anchor\" href=\"#引用\">#</a> 引用</h2>\n<h3 id=\"1-引用的使用\"><a class=\"markdownIt-Anchor\" href=\"#1-引用的使用\">#</a> 1 引用的使用</h3>\n<p><strong>作用：</strong> 给变量起别名<br>\n<strong>语法：</strong> <code>数据类型 &amp;别名 = 原名</code> <br>\n<strong>注意：</strong></p>\n<ul>\n<li>引用必须初始化</li>\n<li>引用在初始化后，不可以改变</li>\n</ul>\n<h3 id=\"2-引用做函数参数\"><a class=\"markdownIt-Anchor\" href=\"#2-引用做函数参数\">#</a> 2 引用做函数参数</h3>\n<p><strong>作用：</strong> 函数传参时，可以利用引用的技术让形参修饰实参<br>\n<strong>优点：</strong> 可以简化指针修改实参</p>\n<blockquote>\n<p>通过引用参数产生的效果同按地址传递是一样的。引用的语法更清楚简单</p>\n</blockquote>\n<pre><code>//1. 值传递\nvoid mySwap01(int a, int b) &#123;\n\tint temp = a;\n\ta = b;\n\tb = temp;\n&#125;\n\n//2. 地址传递\nvoid mySwap02(int* a, int* b) &#123;\n\tint temp = *a;\n\t*a = *b;\n\t*b = temp;\n&#125;\n\n//3. 引用传递\nvoid mySwap03(int&amp; a, int&amp; b) &#123;\n\tint temp = a;\n\ta = b;\n\tb = temp;\n&#125;\n\nint main() &#123;\n\n\tint a = 10;\n\tint b = 20;\n\n\tmySwap01(a, b);\n\tcout &lt;&lt; &quot;a:&quot; &lt;&lt; a &lt;&lt; &quot; b:&quot; &lt;&lt; b &lt;&lt; endl;\n\n\tmySwap02(&amp;a, &amp;b);\n\tcout &lt;&lt; &quot;a:&quot; &lt;&lt; a &lt;&lt; &quot; b:&quot; &lt;&lt; b &lt;&lt; endl;\n\n\tmySwap03(a, b);\n\tcout &lt;&lt; &quot;a:&quot; &lt;&lt; a &lt;&lt; &quot; b:&quot; &lt;&lt; b &lt;&lt; endl;\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n\n</code></pre>\n<h3 id=\"3-引用做函数返回值\"><a class=\"markdownIt-Anchor\" href=\"#3-引用做函数返回值\">#</a> 3 引用做函数返回值</h3>\n<p><strong>作用：</strong> 引用是可以作为函数的返回值存在的<br>\n<strong>用法：引用是可以作为函数的返回值存在的</strong><br>\n<strong>注意：</strong> 函数调用作为左值</p>\n<pre><code>//返回局部变量引用\nint&amp; test01() &#123;\n\tint a = 10; //局部变量\n\treturn a;\n&#125;\n\n//返回静态变量引用\nint&amp; test02() &#123;\n\tstatic int a = 20;//静态变量，存放在全局区，全局区上的数据在程序结束后系统释放\n\treturn a;\n&#125;\n\nint main() &#123;\n\n\t//不能返回局部变量的引用\n\tint&amp; ref = test01();\n\tcout &lt;&lt; &quot;ref = &quot; &lt;&lt; ref &lt;&lt; endl;\n\tcout &lt;&lt; &quot;ref = &quot; &lt;&lt; ref &lt;&lt; endl;\n\n\t//如果函数做左值，那么必须返回引用\n    //输出20 \n\tint&amp; ref2 = test02();\n\tcout &lt;&lt; &quot;ref2 = &quot; &lt;&lt; ref2 &lt;&lt; endl;\n\tcout &lt;&lt; &quot;ref2 = &quot; &lt;&lt; ref2 &lt;&lt; endl;\n\n    //相当于a=1000\n\ttest02() = 1000;\n\t//输出1000\n\tcout &lt;&lt; &quot;ref2 = &quot; &lt;&lt; ref2 &lt;&lt; endl;\n\tcout &lt;&lt; &quot;ref2 = &quot; &lt;&lt; ref2 &lt;&lt; endl;\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<h3 id=\"4-引用的本质\"><a class=\"markdownIt-Anchor\" href=\"#4-引用的本质\">#</a> 4 引用的本质</h3>\n<p><strong>本质：</strong> 在 c++ 内部实现就是一个指针常量</p>\n<pre><code>//发现是引用，转换为 int* const ref = &amp;a;\nvoid func(int&amp; ref)&#123;\n\tref = 100; // ref是引用，转换为*ref = 100\n&#125;\nint main()&#123;\n\tint a = 10;\n    \n    //自动转换为 int* const ref = &amp;a; 指针常量是指针指向不可改，也说明为什么引用不可更改\n\tint&amp; ref = a; \n\tref = 20; //内部发现ref是引用，自动帮我们转换为: *ref = 20;\n    \n\tcout &lt;&lt; &quot;a:&quot; &lt;&lt; a &lt;&lt; endl;\n\tcout &lt;&lt; &quot;ref:&quot; &lt;&lt; ref &lt;&lt; endl;\n    \n\tfunc(a);\n\treturn 0;\n&#125;\n</code></pre>\n<h3 id=\"5-常量引用\"><a class=\"markdownIt-Anchor\" href=\"#5-常量引用\">#</a> 5 常量引用</h3>\n<p><strong>作用：</strong> 常量引用主要用来修饰形参，防止误操作<br>\n在函数形参列表中，可以加<strong> const 修饰形参</strong>，防止形参改变实参</p>\n<pre><code>//引用使用的场景，通常用来修饰形参\nvoid showValue(const int&amp; v) &#123;\n\t//v += 10;\n\tcout &lt;&lt; v &lt;&lt; endl;\n&#125;\n\nint main() &#123;\n\n\t//int&amp; ref = 10;  引用本身需要一个合法的内存空间，因此这行错误\n\t//加入const就可以了，编译器优化代码，int temp = 10; const int&amp; ref = temp;\n\tconst int&amp; ref = 10;\n\n\t//ref = 100;  //加入const后不可以修改变量\n\tcout &lt;&lt; ref &lt;&lt; endl;\n\n\t//函数中利用常量引用防止误操作修改实参\n\tint a = 10;\n\tshowValue(a);\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "https://empireofyt.github.io/computer-science/cpp/heima/c++%E6%A0%B8%E5%BF%83--%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/",
            "url": "https://empireofyt.github.io/computer-science/cpp/heima/c++%E6%A0%B8%E5%BF%83--%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/",
            "title": "c++核心--文件操作",
            "date_published": "2023-02-02T13:13:11.887Z",
            "content_html": "<h2 id=\"文件操作\"><a class=\"markdownIt-Anchor\" href=\"#文件操作\">#</a> 文件操作</h2>\n<p>程序运行时产生的数据都属于临时数据，程序一旦运行结束都会被释放</p>\n<p>通过<strong>文件可以将数据持久化</strong></p>\n<p>C++ 中对文件操作需要包含头文件 <strong><fstream></strong></p>\n<p>文件类型分为两种：</p>\n<ol>\n<li><strong>文本文件</strong>     -  文件以文本的<strong> ASCII 码</strong>形式存储在计算机中</li>\n<li><strong>二进制文件</strong> -  文件以文本的<strong>二进制</strong>形式存储在计算机中，用户一般不能直接读懂它们</li>\n</ol>\n<p>操作文件的三大类:</p>\n<ol>\n<li>ofstream：写操作 (output)</li>\n<li>ifstream： 读操作 (input)</li>\n<li>fstream ： 读写操作</li>\n</ol>\n<h3 id=\"1-文本文件\"><a class=\"markdownIt-Anchor\" href=\"#1-文本文件\">#</a> 1. 文本文件</h3>\n<h4 id=\"11-写文件\"><a class=\"markdownIt-Anchor\" href=\"#11-写文件\">#</a> 1.1 写文件</h4>\n<p>写文件步骤如下：</p>\n<ol>\n<li>包含头文件       <code> #include &lt;fstream&gt;</code></li>\n<li>创建流对象        <code>ofstream ofs;</code></li>\n<li>打开文件          <code>ofs.open(&quot;文件路径&quot;,打开方式);</code></li>\n<li>写数据             <code>ofs &lt;&lt; &quot;写入的数据&quot;;</code></li>\n<li>关闭文件         <code> ofs.close();</code></li>\n</ol>\n<p>打开文件方式：</p>\n<table>\n<thead>\n<tr>\n<th>打开方式</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ios::in</td>\n<td>为读文件而打开文件</td>\n</tr>\n<tr>\n<td>ios::out</td>\n<td>为写文件而打开文件</td>\n</tr>\n<tr>\n<td>ios::ate</td>\n<td>初始位置：文件尾</td>\n</tr>\n<tr>\n<td>ios::app</td>\n<td>追加方式写文件</td>\n</tr>\n<tr>\n<td>ios::trunc</td>\n<td>如果文件存在先删除，再创建</td>\n</tr>\n<tr>\n<td>ios::binary</td>\n<td>二进制方式</td>\n</tr>\n</tbody>\n</table>\n<p><strong>注意</strong>： 文件打开方式可以配合使用，利用 <code>|操作符</code> <br>\n例如：用二进制方式写文件 <code> ios::binary | ios:: out</code></p>\n<p><strong>总结</strong>：</p>\n<ul>\n<li>文件操作必须包含头文件 fstream</li>\n<li>读文件可以利用 ofstream ，或者 fstream 类</li>\n<li>打开文件时候需要指定操作文件的路径，以及打开方式</li>\n<li>利用 &lt;&lt; 可以向文件中写数据</li>\n<li>操作完毕，要 close 关闭文件</li>\n</ul>\n<h4 id=\"12-读文件\"><a class=\"markdownIt-Anchor\" href=\"#12-读文件\">#</a> 1.2 读文件</h4>\n<p>读文件步骤如下：</p>\n<ol>\n<li>包含头文件        #include <fstream></li>\n<li>创建流对象        ifstream ifs;</li>\n<li>打开文件并判断文件是否打开成功<br>\n ifs.open (“文件路径”, 打开方式);</li>\n<li>读数据  四种方式读取</li>\n<li>关闭文件           ifs.close ();</li>\n</ol>\n<p>利用<strong> is_open</strong> 函数可以判断文件是否打开成功</p>\n<pre><code>//四种读取文件的方式\n\n//第一种方式\n\t//char buf[1024] = &#123; 0 &#125;;\n\t//while (ifs &gt;&gt; buf)\n\t//&#123;\n\t//\tcout &lt;&lt; buf &lt;&lt; endl;\n\t//&#125;\n\n\t//第二种\n\t//char buf[1024] = &#123; 0 &#125;;\n\t//while (ifs.getline(buf,sizeof(buf)))\n\t//&#123;\n\t//\tcout &lt;&lt; buf &lt;&lt; endl;\n\t//&#125;\n\n\t//第三种\n\t//string buf;\n\t//while (getline(ifs, buf))\n\t//&#123;\n\t//\tcout &lt;&lt; buf &lt;&lt; endl;\n\t//&#125;\n\n\tchar c;\n\twhile ((c = ifs.get()) != EOF)\n\t&#123;\n\t\tcout &lt;&lt; c;\n\t&#125;\n</code></pre>\n<h3 id=\"2-二进制文件\"><a class=\"markdownIt-Anchor\" href=\"#2-二进制文件\">#</a> 2. 二进制文件</h3>\n<p>以二进制的方式对文件进行读写操作<br>\n打开方式要指定为 <code>ios::binary</code></p>\n<h4 id=\"21-写文件\"><a class=\"markdownIt-Anchor\" href=\"#21-写文件\">#</a> 2.1 写文件</h4>\n<p>二进制方式写文件主要利用流对象调用成员函数 write</p>\n<p>函数原型 ： <code>ostream&amp; write(const char * buffer,int len)</code> ;</p>\n<p>参数解释：字符指针 buffer 指向内存中一段存储空间。len 是读写的字节数</p>\n<pre><code>//1、包含头文件\n\n\t//2、创建输出流对象\n\tofstream ofs(&quot;person.txt&quot;, ios::out | ios::binary);\n\t\n\t//3、打开文件\n\t//ofs.open(&quot;person.txt&quot;, ios::out | ios::binary);\n\n\tPerson p = &#123;&quot;张三&quot;  , 18&#125;;\n\n\t//4、写文件\n\tofs.write((const char *)&amp;p, sizeof(p));\n\n\t//5、关闭文件\n\tofs.close();\n</code></pre>\n<h4 id=\"22-读文件\"><a class=\"markdownIt-Anchor\" href=\"#22-读文件\">#</a> 2.2 读文件</h4>\n<p>二进制方式读文件主要利用流对象调用成员函数 read</p>\n<p>函数原型： <code>istream&amp; read(char *buffer,int len);</code></p>\n<p>参数解释：字符指针 buffer 指向内存中一段存储空间。len 是读写的字节数</p>\n<pre><code>ifstream ifs(&quot;person.txt&quot;, ios::in | ios::binary);\n\tif (!ifs.is_open())\n\t&#123;\n\t\tcout &lt;&lt; &quot;文件打开失败&quot; &lt;&lt; endl;\n\t&#125;\n\n\tPerson p;\n\tifs.read((char *)&amp;p, sizeof(p));\n\n\tcout &lt;&lt; &quot;姓名： &quot; &lt;&lt; p.m_Name &lt;&lt; &quot; 年龄： &quot; &lt;&lt; p.m_Age &lt;&lt; endl;\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "https://empireofyt.github.io/computer-science/cpp/heima/c++%E6%A0%B8%E5%BF%83--%E5%86%85%E5%AD%98%E5%88%86%E5%8C%BA%E6%A8%A1%E5%9E%8B/",
            "url": "https://empireofyt.github.io/computer-science/cpp/heima/c++%E6%A0%B8%E5%BF%83--%E5%86%85%E5%AD%98%E5%88%86%E5%8C%BA%E6%A8%A1%E5%9E%8B/",
            "title": "c++核心--内存分区模型",
            "date_published": "2023-02-02T13:12:35.466Z",
            "content_html": "<h1 id=\"内存分区模型\"><a class=\"markdownIt-Anchor\" href=\"#内存分区模型\">#</a> 内存分区模型</h1>\n<h3 id=\"1-内存分区模型\"><a class=\"markdownIt-Anchor\" href=\"#1-内存分区模型\">#</a> 1. 内存分区模型</h3>\n<p>C++ 程序在执行时，将内存大方向划分为 4 个区域</p>\n<ul>\n<li><strong>代码区</strong>：存放函数体的二进制代码，由操作系统进行管理的</li>\n<li><strong>全局区</strong>：存放全局变量和静态变量以及常量</li>\n<li><strong>栈区</strong>：由编译器自动分配释放，存放函数的参数值，局部变量等</li>\n<li><strong>堆区</strong>：由程序员分配和释放，若程序员不释放，程序结束时由操作系统回收</li>\n</ul>\n<h3 id=\"2-程序运行前\"><a class=\"markdownIt-Anchor\" href=\"#2-程序运行前\">#</a> 2 程序运行前</h3>\n<p>在程序编译后，生成了 exe 可执行程序，未执行该程序前分为两个区域<br>\n<strong>代码区</strong>：</p>\n<ul>\n<li>\n<pre><code>存放 CPU 执行的机器指令代码区是共享的，共享的目的是对于频繁被执行的程序，只需要在内存中有一份代码即可\n</code></pre>\n</li>\n<li>\n<pre><code>代码区是只读的，使其只读的原因是防止程序意外地修改了它的指令\n</code></pre>\n</li>\n</ul>\n<p><strong>全局区</strong>：</p>\n<ul>\n<li>\n<pre><code>全局变量和静态变量存放在此.\n</code></pre>\n</li>\n<li>\n<pre><code>全局区还包含了常量区, 字符串常量和const修饰的全局常量也存放在此.\n</code></pre>\n</li>\n<li>\n<pre><code>该区域的数据在程序结束后由操作系统释放\n</code></pre>\n</li>\n</ul>\n<blockquote>\n<p>const 修饰的局部变量不在全局区<br>\n代码区特点是共享和只读</p>\n</blockquote>\n<h3 id=\"3-程序运行后\"><a class=\"markdownIt-Anchor\" href=\"#3-程序运行后\">#</a> 3. 程序运行后</h3>\n<p><strong>栈区：</strong></p>\n<ul>\n<li>\n<p>由编译器自动分配释放，存放函数的参数值，局部变量等注意事项：</p>\n</li>\n<li>\n<p><strong>不要返回局部变量的地址</strong>，栈区开辟的数据由编译器自动释放。若返回局部变量的地址，第一次可以成功，第二次就会失败了。</p>\n</li>\n</ul>\n<p><strong>堆区</strong></p>\n<ul>\n<li>由程序员分配释放，若程序员不释放，程序结束时由操作系统回收</li>\n<li>在 c++ 中主要利用<strong> new</strong> 在<strong>堆区</strong>开辟内存</li>\n</ul>\n<pre><code>int* func()\n&#123;\n//指针a本质是局部变量，故在栈区\n//指针保存的new的数据是放在堆区\n\tint* a = new int(10);\n\treturn a;\n&#125;\n</code></pre>\n<h3 id=\"4-new操作符\"><a class=\"markdownIt-Anchor\" href=\"#4-new操作符\">#</a> 4. new 操作符</h3>\n<ul>\n<li>C++ 中利用<strong> new</strong> 操作符在堆区开辟数据。利用 <strong>delete</strong> 操作符释放数据</li>\n<li>堆区开辟的数据，由程序员手动开辟，手动释放</li>\n<li><strong>语法</strong>： <code>new 数据类型</code> <br>\n <code>delete 变量名</code></li>\n<li>利用 new 创建的数据，会返回该<strong>数据对应的类型的指针</strong></li>\n<li>new 和 delete 数组的时候，要加上  [ ]</li>\n</ul>\n<pre><code>int* a = new int(10);   //值为10的int型数据\ndelete a;\nint* arr = new int[10];    //10个数据的数组\ndelete[] arr;\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "https://empireofyt.github.io/computer-science/cpp/heima/c++%E6%A0%B8%E5%BF%83--%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/",
            "url": "https://empireofyt.github.io/computer-science/cpp/heima/c++%E6%A0%B8%E5%BF%83--%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/",
            "title": "c++核心--类和对象",
            "date_published": "2023-02-02T13:11:14.603Z",
            "content_html": "<h2 id=\"类和对象\"><a class=\"markdownIt-Anchor\" href=\"#类和对象\">#</a> 类和对象</h2>\n<p>面向对象的三大特性: <strong>封装、继承、多态</strong></p>\n<h3 id=\"1-封装\"><a class=\"markdownIt-Anchor\" href=\"#1-封装\">#</a> 1. 封装</h3>\n<h4 id=\"11-封装的意义\"><a class=\"markdownIt-Anchor\" href=\"#11-封装的意义\">#</a> 1.1 封装的意义：</h4>\n<ul>\n<li>将属性和行为作为一个整体，表现生活中的事物</li>\n<li>将属性和行为加以权限控制</li>\n</ul>\n<p><strong>封装意义一</strong>：在设计类的时候，属性和行为写在一起，表现事物<br>\n<strong>语法：</strong>  <code>class 类名&#123; 访问权限： 属性 / 行为 &#125;;</code></p>\n<p><strong>封装意义二</strong>：类在设计时，可以把属性和行为放在不同的权限下，加以控制访问权限有三种：</p>\n<ul>\n<li>public 公共权限</li>\n<li>protected 保护权限</li>\n<li>private 私有权限</li>\n</ul>\n<p><strong>struct 和 class 的区别</strong>：</p>\n<ul>\n<li>struct 默认权限是 公共 public</li>\n<li>class 默认权限是 私有 private</li>\n</ul>\n<h4 id=\"12-成员属性设置为私有\"><a class=\"markdownIt-Anchor\" href=\"#12-成员属性设置为私有\">#</a> 1.2 成员属性设置为私有</h4>\n<p><strong>优点 1</strong>：将所有成员属性设置为私有，可以自己控制读写权限<br>\n<strong>优点 2</strong>：对于写权限，我们可以检测数据的有效性</p>\n<h3 id=\"2-对象的初始化和清理\"><a class=\"markdownIt-Anchor\" href=\"#2-对象的初始化和清理\">#</a> 2. 对象的初始化和清理</h3>\n<h4 id=\"21-构造函数和析构函数\"><a class=\"markdownIt-Anchor\" href=\"#21-构造函数和析构函数\">#</a> 2.1 构造函数和析构函数</h4>\n<p>构造函数和析构函数将会被编译器<strong>自动调用</strong>，完成对象初始化和清理工作。如果我们不提供构造和析构，编译器会提供<br>\n<strong>编译器提供的构造函数和析构函数是空实现</strong>。<br>\n<strong>构造函数</strong>：主要作用在于创建对象时为对象的成员属性赋值，构造函数由编译器自动调用，无须手动调用。<br>\n<strong>析构函数</strong>：主要作用在于对象销毁前系统自动调用，执行一些清理工作。</p>\n<p><strong>构造函数语法</strong>： <code>类名()&#123;&#125;</code></p>\n<ol>\n<li>构造函数，没有返回值也不写 void</li>\n<li>函数名称与类名相同</li>\n<li>构造函数<strong>可以有参数</strong>，因此<strong>可以发生重载</strong></li>\n<li>程序在调用对象时候会自动调用构造，无须手动调用，而且只会调用一次</li>\n</ol>\n<p><strong>析构函数语法</strong>：  <code>~类名()&#123;&#125;</code></p>\n<ol>\n<li>析构函数，没有返回值也不写 void</li>\n<li>函数名称与类名相同，在名称前加上符号～</li>\n<li>析构函数<strong>不可以有参数</strong>，因此<strong>不可以发生重载</strong></li>\n<li>程序在<strong>对象销毁前会自动调用析构</strong>，无须手动调用，而且只会调用一次</li>\n</ol>\n<h4 id=\"22-构造函数的分类及其调用\"><a class=\"markdownIt-Anchor\" href=\"#22-构造函数的分类及其调用\">#</a> 2.2 构造函数的分类及其调用</h4>\n<p>两种分类方式：</p>\n<ul>\n<li>按参数分为： 有参构造和无参构造</li>\n<li>按类型分为： 普通构造和拷贝构造</li>\n</ul>\n<p>三种调用方式：</p>\n<ul>\n<li>括号法</li>\n<li>显示法</li>\n<li>隐式转换法</li>\n</ul>\n<pre><code>#include&lt;iostream&gt;\n\n#include&lt;string&gt;\n\nusing namespace std;\n\n\n// 构造函数的分类及调用\n\n//分类\n\n\nclass Person &#123;\n\npublic:\n\n        int age;\n\n        Person() &#123;\n\n               cout &lt;&lt; &quot;无参数构造&quot; &lt;&lt; endl;\n\n        &#125;\n\n\n\n        Person(int a) &#123;\n\n               age = a;\n\n               cout &lt;&lt; &quot;有参数构造&quot; &lt;&lt; endl;\n\n        &#125;\n\n\n\n        // 拷贝构造函数\n\n        Person(const Person &amp;p) &#123;\n\n               //将传入的人身上的所有属性，拷贝到我身上\n\n               age = p.age;\n\n               cout &lt;&lt; &quot;拷贝构造函数&quot; &lt;&lt; endl;\n\n        &#125;\n\n        ~Person() &#123;\n\n               cout &lt;&lt; &quot;析构函数&quot; &lt;&lt; endl;\n\n        &#125;\n\n&#125;;\n\n\n\n//调用\n\nvoid test1() &#123;\n        //1. 括号法\n        Person p1;     //默认构造函数调用，\n        //注意调用构造函数时不要加上（），加上括号，编译器会认为这是一个函数的声明\n        Person p2(10); //有参数构造函数\n        Person p3(p2); //拷贝构造函数\n        cout &lt;&lt; &quot;p2's age = &quot; &lt;&lt; p2.age &lt;&lt; endl;\n        cout &lt;&lt; &quot;p3's age = &quot; &lt;&lt; p3.age &lt;&lt; endl;\n\n        //2. 显示法\n        Person p4;//默认构造函数调用，\n        Person p5 = Person(10);//有参数构造函数\n        Person p6 = Person(p5);//拷贝构造函数\n        Person(10);//匿名对象，当前行执行完，系统会立刻回收，马上析构\n        //2.3 隐式转换法\n        Person p7 = 10; // Person p7 = Person(10); \n       Person p8 = p7; // Person p8 = Person(p7); \n        //注意2：不能利用 拷贝构造函数 初始化匿名对象 编译器认为是对象声明\n        //Person p5(p4);\n&#125;\n\n\nint main() &#123;\n        test1();\n        system(&quot;pause&quot;);\n        return 0;\n&#125;\n\n</code></pre>\n<h4 id=\"23-拷贝构造函数调用时机\"><a class=\"markdownIt-Anchor\" href=\"#23-拷贝构造函数调用时机\">#</a> 2.3 拷贝构造函数调用时机</h4>\n<p>C++ 中拷贝构造函数调用时机通常有三种情况</p>\n<ul>\n<li>使用一个已经创建完毕的对象来初始化一个新对象</li>\n<li>值传递的方式给函数参数传值</li>\n<li>以值方式返回局部对象</li>\n</ul>\n<pre><code>class Person &#123;\npublic:\n\tPerson() &#123;\n\t\tcout &lt;&lt; &quot;无参构造函数!&quot; &lt;&lt; endl;\n\t\tmAge = 0;\n\t&#125;\n\tPerson(int age) &#123;\n\t\tcout &lt;&lt; &quot;有参构造函数!&quot; &lt;&lt; endl;\n\t\tmAge = age;\n\t&#125;\n\tPerson(const Person&amp; p) &#123;\n\t\tcout &lt;&lt; &quot;拷贝构造函数!&quot; &lt;&lt; endl;\n\t\tmAge = p.mAge;\n\t&#125;\n\t//析构函数在释放内存之前调用\n\t~Person() &#123;\n\t\tcout &lt;&lt; &quot;析构函数!&quot; &lt;&lt; endl;\n\t&#125;\npublic:\n\tint mAge;\n&#125;;\n\n//1. 使用一个已经创建完毕的对象来初始化一个新对象\nvoid test01() &#123;\n\n\tPerson man(100); //p对象已经创建完毕\n\tPerson newman(man); //调用拷贝构造函数\n\tPerson newman2 = man; //拷贝构造\n\n\t//Person newman3;\n\t//newman3 = man; //不是调用拷贝构造函数，赋值操作\n&#125;\n\n//2. 值传递的方式给函数参数传值\n//相当于Person p1 = p;\nvoid doWork(Person p1) &#123;&#125;\nvoid test02() &#123;\n\tPerson p; //无参构造函数\n\tdoWork(p);\n&#125;\n\n//3. 以值方式返回局部对象\nPerson doWork2()\n&#123;\n\tPerson p1;\n\tcout &lt;&lt; (int *)&amp;p1 &lt;&lt; endl;\n\treturn p1;\n&#125;\n\nvoid test03()\n&#123;\n\tPerson p = doWork2();\n\tcout &lt;&lt; (int *)&amp;p &lt;&lt; endl;\n&#125;\n\n\nint main() &#123;\n\n\t//test01();\n\t//test02();\n\ttest03();\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<h4 id=\"24-构造函数调用规则\"><a class=\"markdownIt-Anchor\" href=\"#24-构造函数调用规则\">#</a> 2.4 构造函数调用规则</h4>\n<p>默认情况下，c++ 编译器至少给一个类添加 3 个函数</p>\n<ul>\n<li><strong>默认构造函数</strong> (无参，函数体为空)</li>\n<li><strong>默认析构函数</strong> (无参，函数体为空)</li>\n<li><strong>默认拷贝构造函数</strong> ，对属性进行值拷贝</li>\n</ul>\n<p><strong>构造函数调用规则</strong>如下：</p>\n<ul>\n<li>如果用户定义<strong>有参构造函数</strong>，c++<strong> 不在提供默认无参构造</strong>，但是会<strong>提供默认拷贝构造</strong></li>\n<li>如果用户定义<strong>拷贝构造函数</strong>，c++<strong> 不会再提供其他构造函数</strong></li>\n</ul>\n<h4 id=\"25-深拷贝和浅拷贝面试经典问题\"><a class=\"markdownIt-Anchor\" href=\"#25-深拷贝和浅拷贝面试经典问题\">#</a> 2.5 深拷贝和浅拷贝（面试经典问题）</h4>\n<p><strong>浅拷贝</strong>：简单的赋值拷贝操作；如果利用编译器提供的拷贝构造函数，就会进行浅拷贝<br>\n<strong>深拷贝</strong>：在堆区重新申请空间，进行拷贝操作；若自己写，可利用 new 进行深拷贝</p>\n<p>浅拷贝的问题：会带来堆区的内存重复释放<br>\n解决方法：使用深拷贝</p>\n<p><img data-src=\"en-resource://database/937:1\" alt=\"098eb1d2a927c933f402f0a31c5475ae.png\"><br>\n<img data-src=\"en-resource://database/939:1\" alt=\"946a958eeefb478fa0ccd1a068fc6dca.png\"></p>\n<pre><code>#include&lt;iostream&gt;\n\n#include&lt;string&gt;\n\n\n\nusing namespace std;\n\n\n\n// 深拷贝和浅拷贝\n\n\n\nclass Person &#123;\n\npublic:\n\n        int age;\n\n        int *height;//设计为指针，是为了把height开辟在堆区\n\n\n\n        Person() &#123;\n\n               cout &lt;&lt; &quot;无参数构造&quot; &lt;&lt; endl;\n\n        &#125;\n\n\n\n        Person(int a, int h) &#123;\n\n               age = a;\n\n               height= new int(h);//把身高开辟在堆区\n\n               cout &lt;&lt; &quot;有参数构造&quot; &lt;&lt; endl;\n\n        &#125;\n\n\n\n        // 拷贝构造函数  \n\n        Person(const Person&amp; p) &#123;\n\n               cout &lt;&lt; &quot;拷贝构造函数!&quot; &lt;&lt; endl;\n\n               //如果不利用深拷贝在堆区创建新内存，会导致浅拷贝带来的重复释放堆区问题\n\n               age = p.age;\n\n               // height = p.height; // 这就是编译器自动进行的浅拷贝\n\n               height = new int(*p.height);  //使用new，在堆区新开辟一个空间\n\n\n\n        &#125;\n\n\n\n        ~Person() &#123;\n\n               //将堆区开辟的数据做释放操作\n\n               if (height != NULL)\n\n               &#123;\n\n                       delete height;\n\n               &#125;\n\n               cout &lt;&lt; &quot;析构函数&quot; &lt;&lt; endl;\n\n        &#125;\n\n&#125;;\n\n\n\nvoid test01() &#123;\n\n        Person p1(18, 160);\n\n        cout &lt;&lt; &quot;p1's age =&quot; &lt;&lt; p1.age &lt;&lt; endl;\n\n        cout &lt;&lt; &quot;p1's height =&quot; &lt;&lt; *p1.height &lt;&lt; endl;\n\n\n\n        Person p2(p1);\n\n        cout &lt;&lt; &quot;p2's age =&quot; &lt;&lt; p2.age &lt;&lt; endl;\n\n        cout &lt;&lt; &quot;p2's height =&quot; &lt;&lt; *p2.height &lt;&lt; endl;\n\n&#125;\n\n\nint main() &#123;\n\n        test01();\n\n        system(&quot;pause&quot;);\n\n        return 0;\n\n&#125;\n\n</code></pre>\n<blockquote>\n<p><strong>注意</strong>：当成功编写拷贝构造函数，但在 vs 里面运行失败，原因在于没有把其他 cpp 文件注释<br>\n<strong>总结</strong>：如果属性有在堆区开辟的，一定要自己提供拷贝构造函数，防止浅拷贝带来的问题</p>\n</blockquote>\n<h4 id=\"26-初始化列表\"><a class=\"markdownIt-Anchor\" href=\"#26-初始化列表\">#</a> 2.6 初始化列表</h4>\n<p><strong>作用</strong>：C++ 提供了初始化列表语法，用来初始化属性<br>\n<strong>语法</strong>： <code>构造函数()：属性1(值1),属性2（值2）... &#123;&#125;</code> <br>\n 上述语法固定了初始化的值，若想改变，则需要按照下法处理</p>\n<pre><code>class Person &#123;\n\npublic:\n\n        int a, b, c;\n\n        //初始化列表，可随时改变值\n\n        Person(int aa, int bb, int cc) :a(aa), b(bb), c(cc)\n\n        &#123;  &#125;\n\n&#125;;\n\n\n</code></pre>\n<h4 id=\"27-类对象作为类成员\"><a class=\"markdownIt-Anchor\" href=\"#27-类对象作为类成员\">#</a> 2.7 类对象作为类成员</h4>\n<pre><code>class A&#123;&#125;\nclass B&#123;\n    A b;//\n&#125;\n</code></pre>\n<p>当类 A 对象作为 B 中一个成员时，创建对象时，会</p>\n<ul>\n<li>先构造 A 再构造 B</li>\n<li>先析构 B 在析构 A</li>\n</ul>\n<h4 id=\"28-静态成员\"><a class=\"markdownIt-Anchor\" href=\"#28-静态成员\">#</a> 2.8 静态成员</h4>\n<p>静态成员就是在成员变量和成员函数前加上关键字 static，称为静态成员<br>\n静态成员分为：</p>\n<ul>\n<li>静态成员变量</li>\n</ul>\n<ol>\n<li>所有对象共享同一份数据</li>\n<li>在编译阶段分配内存</li>\n<li>类内声明，类外初始化</li>\n</ol>\n<blockquote>\n<p>静态成员变量也有访问权限；<br>\n静态成员变量可以通过对象访问（ <code>对象名.静态成员变量 </code> ）或者通过类名访问（ <code>类名::静态成员变量</code> ）</p>\n</blockquote>\n<pre><code>class Person\n&#123;\n\t\npublic:\n\tstatic int m_A; //静态成员变量\nprivate:\n\tstatic int m_B; //静态成员变量也是有访问权限的\n&#125;;\n//类外初始化的方法\nint Person::m_A = 10;\nint Person::m_B = 10;//私有变量无法类外访问\n\nvoid test01()\n&#123;\n\t//静态成员变量两种访问方式\n\n\t//1、通过对象\n\tPerson p1;\n\tp1.m_A = 100;\n\tcout &lt;&lt; &quot;p1.m_A = &quot; &lt;&lt; p1.m_A &lt;&lt; endl;//输出100\n\n\tPerson p2;\n\tp2.m_A = 200;\n\tcout &lt;&lt; &quot;p1.m_A = &quot; &lt;&lt; p1.m_A &lt;&lt; endl; //共享同一份数据，200\n\tcout &lt;&lt; &quot;p2.m_A = &quot; &lt;&lt; p2.m_A &lt;&lt; endl;//输出200\n\n\t//2、通过类名\n\tcout &lt;&lt; &quot;m_A = &quot; &lt;&lt; Person::m_A &lt;&lt; endl;//200\n\t//cout &lt;&lt; &quot;m_B = &quot; &lt;&lt; Person::m_B &lt;&lt; endl; //私有权限访问不到\n&#125;\n\nint main() &#123;\n\ttest01();\n\tsystem(&quot;pause&quot;);\n\treturn 0;\n&#125;\n</code></pre>\n<ul>\n<li>静态成员函数</li>\n</ul>\n<ol>\n<li>所有对象共享同一个函数</li>\n<li>静态成员函数只能访问静态成员变量</li>\n</ol>\n<blockquote>\n<p>访问方式：1 通过对象 (.)  2 通过类名 ( :: )<br>\n 静态成员函数也有访问权限；</p>\n</blockquote>\n<h3 id=\"3-c对象模型和this指针\"><a class=\"markdownIt-Anchor\" href=\"#3-c对象模型和this指针\">#</a> 3. C++ 对象模型和 this 指针</h3>\n<h4 id=\"31-成员变量和成员函数分开存储\"><a class=\"markdownIt-Anchor\" href=\"#31-成员变量和成员函数分开存储\">#</a> 3.1 成员变量和成员函数分开存储</h4>\n<ul>\n<li>\n<p>在 C++ 中，类内的成员变量和成员函数分开存储</p>\n</li>\n<li>\n<p>只有<strong>非静态成员变量</strong>才属于类的对象上，占用内存空间；静态成员变量和（静态 &amp; 非静态）成员函数都不属于类的对象，不占用内存空间。</p>\n</li>\n<li>\n<p><strong>空对象</strong>占用内存空间为<strong> 1</strong>，也有自己独一无二的内存地址</p>\n</li>\n</ul>\n<h4 id=\"32-this指针\"><a class=\"markdownIt-Anchor\" href=\"#32-this指针\">#</a> 3.2 this 指针</h4>\n<p>在 C<ins> 中成员变量和成员函数是分开存储的，每一个非静态成员函数只会诞生一份函数实例，也就是说多个同类型的对象会共用一块代码<br>\n那么问题是：这一块代码是如何区分那个对象调用自己的呢？c</ins> 通过提供特殊的<strong>对象指针，this 指针</strong>，解决上述问题。</p>\n<p><strong>this 指针</strong>指向被调用的成员函数所属的对象 this 指针是隐含每一个非静态成员函数内的一种指针</p>\n<p>this 指针不需要定义，直接使用即可</p>\n<p><strong>this 指针的用途</strong>：</p>\n<ul>\n<li>当形参和成员变量同名时，可用 this 指针来区分</li>\n<li>在类的非静态成员函数中返回对象本身，可使用 return *this</li>\n</ul>\n<pre><code>class Person\n&#123;\npublic:\n\n\tPerson(int age)\n\t&#123;\n\t\t//1、当形参和成员变量同名时，可用this指针来区分,，第一个age才是类内定义的age，第二个age是传来的参数副本\n\t\tthis-&gt;age = age;\n\t&#125;\n\n\tPerson&amp; PersonAddPerson(Person p) //返回的是引用才会一直加，否则就是返回副本\n\t&#123;\n\t\tthis-&gt;age += p.age;\n\t\t//返回对象本身\n\t\treturn *this;\n\t&#125;\n\n\tint age;\n&#125;;\n\nvoid test01()\n&#123;\n\tPerson p1(10);\n\tcout &lt;&lt; &quot;p1.age = &quot; &lt;&lt; p1.age &lt;&lt; endl;\n\n\tPerson p2(10);\n    //链式编程思想\np2.PersonAddPerson(p1).PersonAddPerson(p1).PersonAddPerson(p1);\n\tcout &lt;&lt; &quot;p2.age = &quot; &lt;&lt; p2.age &lt;&lt; endl;\n&#125;\n\nint main() &#123;\n\n\ttest01();\n\tsystem(&quot;pause&quot;);\n\treturn 0;\n&#125;\n</code></pre>\n<h4 id=\"33-空指针访问成员函数\"><a class=\"markdownIt-Anchor\" href=\"#33-空指针访问成员函数\">#</a> 3.3 空指针访问成员函数</h4>\n<p>C++ 中空指针也是可以调用成员函数的，但是也要注意有没有用到 this 指针</p>\n<p>如果用到 this 指针，需要加以判断保证代码的健壮性</p>\n<p>this 指针的本质是指针常量，指针的指向不可以修改</p>\n<pre><code>void ShowPerson() &#123;\n\t\tif (this == NULL) &#123;\n\t\t\treturn;\n\t\t&#125;\n\t\tcout &lt;&lt; mAge &lt;&lt; endl;\n\t&#125;\n\n</code></pre>\n<h4 id=\"34-const修饰成员函数\"><a class=\"markdownIt-Anchor\" href=\"#34-const修饰成员函数\">#</a> 3.4 const 修饰成员函数</h4>\n<p><strong>常函数</strong>：</p>\n<ul>\n<li>成员函数后加 const 后我们称为这个函数为常函数</li>\n<li>常函数内不可以修改成员属性</li>\n<li>成员属性声明时加关键字 mutable 后，在常函数中依然可以修改</li>\n</ul>\n<p><strong>常对象</strong>：</p>\n<ul>\n<li>声明对象前加 const 称该对象为常对象</li>\n<li>常对象只能调用常函数</li>\n</ul>\n<pre><code>class Person &#123;\npublic:\n\tPerson() &#123;\n\t\tm_A = 0;\n\t\tm_B = 0;\n\t&#125;\n\n\t//this指针的本质是一个指针常量，指针的指向不可修改\n\t//如果想让指针指向的值也不可以修改，需要声明常函数\n\tvoid ShowPerson() const &#123;\n\t\t//const Type* const pointer;\n\t\t//this = NULL; //不能修改指针的指向 Person* const this;\n\t\t//this-&gt;mA = 100; //但是this指针指向的对象的数据是可以修改的\n\n\t\t//const修饰成员函数，表示指针指向的内存空间的数据不能修改，除了mutable修饰的变量\n\t\tthis-&gt;m_B = 100;\n\t&#125;\n\n\tvoid MyFunc() const &#123;\n\t\t//mA = 10000;\n\t&#125;\n\npublic:\n\tint m_A;\n\tmutable int m_B; //可修改 可变的\n&#125;;\n\n\n//const修饰对象  常对象\nvoid test01() &#123;\n\n\tconst Person person; //常量对象  \n\tcout &lt;&lt; person.m_A &lt;&lt; endl;\n\t//person.mA = 100; //常对象不能修改成员变量的值,但是可以访问\n\tperson.m_B = 100; //但是常对象可以修改mutable修饰成员变量\n\n\t//常对象访问成员函数\n\tperson.MyFunc(); //常对象不能调用const的函数\n\n&#125;\n\n</code></pre>\n<h3 id=\"4-友元\"><a class=\"markdownIt-Anchor\" href=\"#4-友元\">#</a> 4. 友元</h3>\n<p>友元的目的就是让一个函数或者类 访问另一个类中私有成员</p>\n<p>友元的关键字为<strong> friend</strong><br>\n 友元的三种实现</p>\n<ol>\n<li>全局函数做友元</li>\n</ol>\n<pre><code>//告诉编译器 goodGay全局函数 是 Building类的好朋友，可以访问类中的私有内容\n\tfriend void goodGay(Building * building);\n</code></pre>\n<ol start=\"2\">\n<li>类做友元</li>\n</ol>\n<pre><code>//告诉编译器 goodGay类是Building类的好朋友，可以访问到Building类中私有内容\n\tfriend class goodGay;\n</code></pre>\n<ol start=\"3\">\n<li>成员函数做友元</li>\n</ol>\n<pre><code>//告诉编译器  goodGay类中的visit成员函数 是Building好朋友，可以访问私有内容\n\tfriend void goodGay::visit();\n</code></pre>\n<h3 id=\"5-运算符重载\"><a class=\"markdownIt-Anchor\" href=\"#5-运算符重载\">#</a> 5. 运算符重载</h3>\n<p><strong>概念</strong>：对已有的运算符重新进行定义，赋予其另一种功能，以适应不同的数据类型<br>\n<strong>注意</strong>：对于内置的数据类型的表达式的的运算符是不可能改变的</p>\n<h4 id=\"51-加号运算符重载\"><a class=\"markdownIt-Anchor\" href=\"#51-加号运算符重载\">#</a> 5.1 加号运算符重载</h4>\n<p>方法：</p>\n<ul>\n<li>成员函数</li>\n<li>全局函数</li>\n</ul>\n<pre><code>//成员函数实现 + 号运算符重载\n\tPerson operator+(const Person&amp; p) &#123;\n\t\tPerson temp;\n\t\ttemp.m_A = this-&gt;m_A + p.m_A;\n\t\ttemp.m_B = this-&gt;m_B + p.m_B;\n\t\treturn temp;\n\t&#125;\n    Person p3 = p2 + p1;  //相当于 p2.operaor+(p1)\n</code></pre>\n<pre><code>//全局函数实现 + 号运算符重载\nPerson operator+(const Person&amp; p1, const Person&amp; p2) &#123;\n\tPerson temp(0, 0);\n\ttemp.m_A = p1.m_A + p2.m_A;\n\ttemp.m_B = p1.m_B + p2.m_B;\n\treturn temp;\n&#125;\nPerson p3 = p2 + p1;  //相当于 operaor+(p1,p2)\n</code></pre>\n<pre><code>//全局函数\n//运算符重载 可以发生函数重载 \nPerson operator+(const Person&amp; p2, int val)  \n&#123;\n\tPerson temp;\n\ttemp.m_A = p2.m_A + val;\n\ttemp.m_B = p2.m_B + val;\n\treturn temp;\n&#125;\nPerson p4 = p3 + 10; //相当于 operator+(p3,10)\n\n</code></pre>\n<h4 id=\"52-左移运算符重载\"><a class=\"markdownIt-Anchor\" href=\"#52-左移运算符重载\">#</a> 5.2 左移运算符重载</h4>\n<p>方式：只有全局函数才可以，成员函数无法达到我们的期望</p>\n<pre><code>//成员函数：\n//本质p.operator&lt;&lt;(cout)  简化版本p&lt;&lt;cout，不满足我们的期望\n        void operator&lt;&lt;(cout) &#123;&#125;\n</code></pre>\n<pre><code>//只能利用全局函数重载左移运算符\n//本质operator&lt;&lt;(cout， p)  简化版本cout&lt;&lt;p，符合要求\n//ostream对象只能有一个\nostream&amp; operator&lt;&lt;(ostream&amp; out, Person&amp; p) &#123;\n\tout &lt;&lt; &quot;a:&quot; &lt;&lt; p.m_A &lt;&lt; &quot; b:&quot; &lt;&lt; p.m_B;\n\treturn out;\n&#125;\n//链式编程思想，定义返回的类型为ostream&amp;，则cout &lt;&lt; p后还是一个cout，可以继续加endl\n   cout &lt;&lt; p &lt;&lt; endl;\n</code></pre>\n<h4 id=\"53-递增运算符重载\"><a class=\"markdownIt-Anchor\" href=\"#53-递增运算符重载\">#</a> 5.3 递增运算符重载</h4>\n<p>深浅拷贝问题<br>\n c++ 编译器至少给一个类添加 4 个函数</p>\n<ul>\n<li>默认构造函数 (无参，函数体为空)</li>\n<li>默认析构函数 (无参，函数体为空)</li>\n<li>默认拷贝构造函数，对属性进行值拷贝</li>\n<li>赋值运算符 operator=, 对属性进行值拷贝</li>\n</ul>\n<p>如果类中有属性指向堆区，做赋值操作时也会出现深浅拷贝问题</p>\n<pre><code>class Person\n&#123;\npublic:\n\n\tPerson(int age)\n\t&#123;\n\t\t//将年龄数据开辟到堆区\n\t\tm_Age = new int(age);\n\t&#125;\n\n\t//重载赋值运算符 \n\tPerson&amp; operator=(Person &amp;p)\n\t&#123;\n\t\tif (m_Age != NULL)\n\t\t&#123;\n\t\t\tdelete m_Age;\n\t\t\tm_Age = NULL;\n\t\t&#125;\n\t\t//编译器提供的代码是浅拷贝\n\t\t//m_Age = p.m_Age;\n\n\t\t//提供深拷贝 解决浅拷贝的问题\n\t\tm_Age = new int(*p.m_Age);\n\n\t\t//返回自身\n\t\treturn *this;\n\t&#125;\n\n\n\t~Person()\n\t&#123;\n\t\tif (m_Age != NULL)\n\t\t&#123;\n\t\t\tdelete m_Age;\n\t\t\tm_Age = NULL;\n\t\t&#125;\n\t&#125;\n\n\t//年龄的指针\n\tint *m_Age;\n\n&#125;;\n\n\nvoid test01()\n&#123;\n\tPerson p1(18);\n\tPerson p2(20);\n\tPerson p3(30);\n\n\tp3 = p2 = p1; //赋值操作\n    \n\tcout &lt;&lt; &quot;p1的年龄为：&quot; &lt;&lt; *p1.m_Age &lt;&lt; endl;\n    cout &lt;&lt; &quot;p2的年龄为：&quot; &lt;&lt; *p2.m_Age &lt;&lt; endl;\n\tcout &lt;&lt; &quot;p3的年龄为：&quot; &lt;&lt; *p3.m_Age &lt;&lt; endl;\n&#125;\n\nint main() &#123;\n\ttest01();\n\tsystem(&quot;pause&quot;);\n\treturn 0;\n&#125;\n</code></pre>\n<h4 id=\"55-函数调用运算符重载\"><a class=\"markdownIt-Anchor\" href=\"#55-函数调用运算符重载\">#</a> 5.5 函数调用运算符重载</h4>\n<ul>\n<li>函数调用运算符 () 也可以重载</li>\n<li>由于重载后使用的方式非常像函数的调用，因此称为仿函数仿函数</li>\n<li>没有固定写法，非常灵活</li>\n</ul>\n<pre><code>class MyPrint\n&#123;\npublic:\n\tvoid operator()(string text)\n\t&#123;\n\t\tcout &lt;&lt; text &lt;&lt; endl;\n\t&#125;\n\n&#125;;\nvoid test01()\n&#123;\n\t//重载的（）操作符 也称为仿函数\n\tMyPrint myFunc;\n\tmyFunc(&quot;hello world&quot;);\n&#125;\n\n\nclass MyAdd\n&#123;\npublic:\n\tint operator()(int v1, int v2)\n\t&#123;\n\t\treturn v1 + v2;\n\t&#125;\n&#125;;\n\nvoid test02()\n&#123;\n\tMyAdd add;\n\tint ret = add(10, 10);\n\tcout &lt;&lt; &quot;ret = &quot; &lt;&lt; ret &lt;&lt; endl;\n\n\t//匿名对象调用  \n\tcout &lt;&lt; &quot;MyAdd()(100,100) = &quot; &lt;&lt; MyAdd()(100, 100) &lt;&lt; endl;\n&#125;\n</code></pre>\n<h3 id=\"6-继承\"><a class=\"markdownIt-Anchor\" href=\"#6-继承\">#</a> 6. 继承</h3>\n<h4 id=\"61-继承的基本语法\"><a class=\"markdownIt-Anchor\" href=\"#61-继承的基本语法\">#</a> 6.1 继承的基本语法</h4>\n<p><strong>优点</strong>： 减少重复代码<br>\n<strong>语法</strong>：  <code>class A : 继承方式 B;</code></p>\n<ul>\n<li>A 类称为子类 或 派生类</li>\n<li>B 类称为父类 或 基类</li>\n</ul>\n<p>派生类中的成员，包含两大部分：</p>\n<ul>\n<li>一类是从基类继承过来的，一类是自己增加的成员。</li>\n<li>从基类继承过过来的表现其共性，而新增的成员体现了其个性。</li>\n</ul>\n<h4 id=\"62-继承方式\"><a class=\"markdownIt-Anchor\" href=\"#62-继承方式\">#</a> 6.2 继承方式</h4>\n<p>继承方式：</p>\n<ol>\n<li>公共继承</li>\n<li>保护继承</li>\n<li>私有继承<br>\n<img data-src=\"en-resource://database/1062:1\" alt=\"dc2636a35ca7cf20ef2e3bf033b2b85c.png\"></li>\n</ol>\n<h4 id=\"63-继承中的对象模型\"><a class=\"markdownIt-Anchor\" href=\"#63-继承中的对象模型\">#</a> 6.3 继承中的对象模型</h4>\n<pre><code>class Base &#123;\n\npublic:\n        int m_A;\nprotected:\n        int m_B;\nprivate:\n        int m_C;\n&#125;;\nclass Son : public Base &#123;\npublic:\n        int m_D;\n&#125;;\n\nvoid test01() &#123;\n        cout &lt;&lt; sizeof(Son) &lt;&lt; endl;//输出的是16\n        return;\n&#125;\n</code></pre>\n<blockquote>\n<p>父类中的<strong>所有非静态成员属性</strong>都会被子类继承下去<br>\n父类中的私有成员属性是被编译器隐藏了，虽然访问不到，但的确被继承了</p>\n</blockquote>\n<p>利用 vs 的开发人员命令提示工具查看对象模型（对象的布局）:</p>\n<ol>\n<li>打开工具窗口后，定位到当前 CPP 文件的盘符</li>\n<li>然后输入： cl /d1 reportSingleClassLayout 查看的类名 所属文件名</li>\n<li>结果如下所示：<br>\n<img data-src=\"en-resource://database/1066:1\" alt=\"a2fb57ba4f8eafec791c565fa73df6b9.png\"></li>\n</ol>\n<h4 id=\"64-继承中构造和析构的顺序\"><a class=\"markdownIt-Anchor\" href=\"#64-继承中构造和析构的顺序\">#</a> 6.4 继承中构造和析构的顺序</h4>\n<p>继承中：</p>\n<ul>\n<li>先调用父类构造函数，再调用子类构造函数，</li>\n<li>析构顺序与构造相反</li>\n</ul>\n<h4 id=\"65-继承同名成员处理方式\"><a class=\"markdownIt-Anchor\" href=\"#65-继承同名成员处理方式\">#</a> 6.5 继承同名成员处理方式</h4>\n<p>当子类与父类出现同名的成员，如何通过子类对象，访问到子类或父类中同名的数据：</p>\n<ul>\n<li>访问子类同名成员 直接访问即可</li>\n<li>访问父类同名成员 需要加作用域</li>\n</ul>\n<blockquote>\n<p>当子类与父类拥有同名的成员函数（即使参数列表不同），子类会隐藏父类中同名成员函数，加作用域可以访问到父类中同名函数</p>\n</blockquote>\n<pre><code>class Base &#123;\npublic:\n        Base() &#123;\n               m_A = 100;\n        &#125;\n        void func() &#123;\n               cout &lt;&lt; &quot;父类的函数&quot; &lt;&lt; endl;\n        &#125;\n\n        void func(int m_A) &#123;\n               cout &lt;&lt; &quot;父类的函数有参数&quot; &lt;&lt; endl;\n        &#125;\n        int m_A;\n&#125;;\n\nclass Son : public Base &#123;\npublic:\n        Son() &#123;\n               m_A = 200;\n       &#125;\n        void func() &#123;\n               cout &lt;&lt; &quot;子类的函数&quot; &lt;&lt; endl;\n        &#125;\n        int m_A;\n\n&#125;;\n\nvoid test01() &#123;\n        Son b;\n        cout &lt;&lt; b.m_A &lt;&lt; endl;//直接访问，即为子类的同名成员\n        cout &lt;&lt; b.Base::m_A &lt;&lt; endl;//加上作用域，即可访问父类的同名成员\n        b.func();//直接访问，即为子类的同名函数\n        b.Base::func();//加上作用域，即可访问父类的同名函数\n\n        //当子类与父类拥有同名的成员函数，子类会隐藏父类中所有版本的同名成员函数\n        //如果想访问父类中被隐藏的同名成员函数，需要加父类的作用域\n        //b.func(100);\n        b.Base::func(100);\n        return;\n&#125;\n</code></pre>\n<h4 id=\"66-继承同名静态成员处理方式\"><a class=\"markdownIt-Anchor\" href=\"#66-继承同名静态成员处理方式\">#</a> 6.6 继承同名静态成员处理方式</h4>\n<p>静态成员变量复习：</p>\n<ul>\n<li>类内声明，类外初始化</li>\n<li>访问方式有两种：1 通过对象访问      2. 通过类名访问</li>\n</ul>\n<p>继承同名静态成员处理方式：</p>\n<ul>\n<li>访问子类同名成员 直接访问即可</li>\n<li>访问父类同名成员 需要加作用域</li>\n</ul>\n<blockquote>\n<p>当子类与父类拥有同名的静态成员函数（即使参数列表不同），子类会隐藏父类中同名静态成员函数，加作用域可以访问到父类中同名静态成员函数</p>\n</blockquote>\n<pre><code>class Base &#123;\npublic:\n        //静态成员变量特点：定义就分配内存，所有对象共享同一份数据\n        //类内申明，类外初始化\n        static int m_A;\n        static void func() &#123;\n               cout &lt;&lt; &quot;父类的函数&quot; &lt;&lt; endl;\n        &#125;\n&#125;;\nint Base::m_A = 100;\n\nclass Son : public Base &#123;\npublic:\n        static int m_A;\n        static void func() &#123;\n               cout &lt;&lt; &quot;子类的函数&quot; &lt;&lt; endl;\n        &#125;\n&#125;;\nint Son::m_A = 200;\n\nvoid test01() &#123;\n        //通过对象访问\n        cout &lt;&lt; &quot;通过对象访问： &quot; &lt;&lt; endl;\n        Son b;\n        cout &lt;&lt; &quot;Son下m_A = &quot; &lt;&lt; b.m_A &lt;&lt; endl;//直接访问，即为子类的同名成员\n       cout &lt;&lt; &quot;Base下m_A = &quot; &lt;&lt; b.Base::m_A &lt;&lt; endl;//加上作用域，即可访问父类的同名成员\n\n        //通过类名访问\n        cout &lt;&lt; &quot;通过类名访问： &quot; &lt;&lt; endl;\n        cout &lt;&lt; &quot;Son下m_A = &quot; &lt;&lt; Son::m_A &lt;&lt; endl;//直接访问，即为子类的同名成员\n        cout &lt;&lt; &quot;Base下m_A = &quot; &lt;&lt; Base::m_A &lt;&lt; endl;//加上作用域，即可访问父类的同名成员\n        //第一个::代表通过类名方式访问， 第二个::代表作用域\n        cout &lt;&lt; &quot;Base下m_A = &quot; &lt;&lt; Son::Base::m_A &lt;&lt; endl;\n        return;\n&#125;\n\nvoid test02() &#123;\n       //通过对象访问\n        cout &lt;&lt; &quot;通过对象访问： &quot; &lt;&lt; endl;\n        Son s;\n        s.func();\n        s.Base::func();\n        //当子类与父类拥有同名的成员函数，子类会隐藏父类中所有版本的同名成员函数\n        //如果想访问父类中被隐藏的同名成员函数，需要加父类的作用域\n        //s.func(100);\n        s.Base::func(100);\n        \n        //通过类名访问\n        cout &lt;&lt; &quot;通过类名访问： &quot; &lt;&lt; endl;\n        Son::func();\n        Base::func();\n        Son::Base::func();\n        Son::Base::func(100);\n&#125;\n\n</code></pre>\n<h4 id=\"67-多继承语法\"><a class=\"markdownIt-Anchor\" href=\"#67-多继承语法\">#</a> 6.7 多继承语法</h4>\n<p>C++ 允许一个类继承多个类</p>\n<p><strong>语法</strong>： <code>class 子类 ：继承方式 父类1 ， 继承方式 父类2...</code></p>\n<p>多继承可能会引发父类中有同名成员出现，需要加<strong>作用域</strong>区分</p>\n<p>C++ 实际开发中不建议用多继承</p>\n<h4 id=\"68-菱形继承\"><a class=\"markdownIt-Anchor\" href=\"#68-菱形继承\">#</a> 6.8 菱形继承</h4>\n<p><strong>菱形继承概念</strong>：两个派生类继承同一个基类，又有某个类同时继承者两个派生类</p>\n<pre><code>class Animal\n&#123;\npublic:\n\tint m_Age;\n&#125;;\n\n//利用虚继承，可以解决菱形继承的问题\n//继承前加virtual关键字后，变为虚继承\n//此时公共的父类Animal称为虚基类\nclass Sheep : virtual public Animal &#123;&#125;;\nclass Tuo   : virtual public Animal &#123;&#125;;\nclass SheepTuo : public Sheep, public Tuo &#123;&#125;;\n\nvoid test01()\n&#123;\n\tSheepTuo st;\n\tst.Sheep::m_Age = 100;\n\tst.Tuo::m_Age = 200;\n\n\tcout &lt;&lt; &quot;st.Sheep::m_Age = &quot; &lt;&lt; st.Sheep::m_Age &lt;&lt; endl;\n\tcout &lt;&lt; &quot;st.Tuo::m_Age = &quot; &lt;&lt;  st.Tuo::m_Age &lt;&lt; endl;\n\tcout &lt;&lt; &quot;st.m_Age = &quot; &lt;&lt; st.m_Age &lt;&lt; endl;\n&#125;\n</code></pre>\n<blockquote>\n<p>菱形继承带来的主要问题是子类继承两份相同的数据，导致资源浪费以及毫无意义<br>\n利用虚继承可以解决菱形继承问题</p>\n</blockquote>\n<h3 id=\"7-多态\"><a class=\"markdownIt-Anchor\" href=\"#7-多态\">#</a> 7. 多态</h3>\n<h4 id=\"71-多态的基本概念\"><a class=\"markdownIt-Anchor\" href=\"#71-多态的基本概念\">#</a> 7.1 多态的基本概念</h4>\n<p>多态分为两类</p>\n<ul>\n<li><strong>静态</strong>多态: <strong>函数重载和 算符重载</strong>属于静态多态，复用函数名</li>\n<li><strong>动态</strong>多态: <strong>派生类和虚函数</strong>实现运行时多态静态多态和动态多态</li>\n</ul>\n<p>区别：</p>\n<ul>\n<li><strong>静态多态</strong>的函数地址<strong>早绑定 - 编译阶段</strong>确定函数地址</li>\n<li><strong>动态多态</strong>的函数地址<strong>晚绑定 - 运行阶段</strong>确定函数地址</li>\n</ul>\n<p>应用：</p>\n<ul>\n<li>基类中的函数 A 不是虚函数，派生类中的同名函数 Aa，则生成一个派生类对象，只会调用 A</li>\n<li>基类中的函数 A 是虚函数，派生类中的同名函数 Aa，则生成一个派生类对象，会调用 Aa</li>\n</ul>\n<p>多态满足条件</p>\n<ul>\n<li>有继承关系子类</li>\n<li><strong>重写</strong>父类中的<strong>虚函数</strong>多态<br>\n<strong>重写</strong>：函数返回值类型 函数名 参数列表 完全一致称为重写</li>\n</ul>\n<p>使用条件</p>\n<ul>\n<li>父类指针或引用指向子类对象</li>\n</ul>\n<pre><code>父类 *指针变量 = new 子类;\n</code></pre>\n<p>多态的优点：</p>\n<ul>\n<li>代码组织结构清晰</li>\n<li>可读性强</li>\n<li>利于前期和后期的扩展以及维护</li>\n</ul>\n<p><img data-src=\"en-resource://database/1070:1\" alt=\"e1c8f86e43581c2952d33d0e5f322eed.png\"></p>\n<p>没有重写时：<br>\n<img data-src=\"en-resource://database/1072:1\" alt=\"41c0d2aa0e0c734b3aa5dcfb2aa72f8c.png\"></p>\n<p>发生重写时：<br>\n<img data-src=\"en-resource://database/1074:1\" alt=\"b18a91d2beec4622fb0af86790fe2b5c.png\"></p>\n<pre><code>class Animal\n&#123;\npublic:\n\t//Speak函数就是虚函数\n\t//函数前面加上virtual关键字，变成虚函数，那么编译器在编译的时候就不能确定函数调用了。\n\tvirtual void speak()\n\t&#123;\n\t\tcout &lt;&lt; &quot;动物在说话&quot; &lt;&lt; endl;\n\t&#125;\n&#125;;\n\nclass Cat :public Animal\n&#123;\npublic:\n\tvoid speak()\n\t&#123;\n\t\tcout &lt;&lt; &quot;小猫在说话&quot; &lt;&lt; endl;\n\t&#125;\n&#125;;\n\nclass Dog :public Animal\n&#123;\npublic:\n\n\tvoid speak()\n\t&#123;\n\t\tcout &lt;&lt; &quot;小狗在说话&quot; &lt;&lt; endl;\n\t&#125;\n\n&#125;;\n//我们希望传入什么对象，那么就调用什么对象的函数\n//如果函数地址在编译阶段就能确定，那么静态联编\n//如果函数地址在运行阶段才能确定，就是动态联编\n\nvoid DoSpeak(Animal &amp; animal)\n&#123;\n\tanimal.speak();\n&#125;\n//\n//多态满足条件： \n//1、有继承关系\n//2、子类重写父类中的虚函数\n//多态使用：\n//父类指针或引用指向子类对象\n\nvoid test01()\n&#123;\n\tCat cat;\n\tDoSpeak(cat);\n\n\tDog dog;\n\tDoSpeak(dog);\n&#125;\n</code></pre>\n<pre><code>//多态实现\n//抽象计算器类\n//多态优点：代码组织结构清晰，可读性强，利于前期和后期的扩展以及维护\nclass AbstractCalculator\n&#123;\npublic :\n\n\tvirtual int getResult()\n\t&#123;\n\t\treturn 0;\n\t&#125;\n\n\tint m_Num1;\n\tint m_Num2;\n&#125;;\n\n//加法计算器\nclass AddCalculator :public AbstractCalculator\n&#123;\npublic:\n\tint getResult()\n\t&#123;\n\t\treturn m_Num1 + m_Num2;\n\t&#125;\n&#125;;\n\n//减法计算器\nclass SubCalculator :public AbstractCalculator\n&#123;\npublic:\n\tint getResult()\n\t&#123;\n\t\treturn m_Num1 - m_Num2;\n\t&#125;\n&#125;;\n\nvoid test02()\n&#123;\n\t//创建加法计算器\n\tAbstractCalculator *abc = new AddCalculator;\n\tabc-&gt;m_Num1 = 10;\n\tabc-&gt;m_Num2 = 10;\n\tcout &lt;&lt; abc-&gt;m_Num1 &lt;&lt; &quot; + &quot; &lt;&lt; abc-&gt;m_Num2 &lt;&lt; &quot; = &quot; &lt;&lt; abc-&gt;getResult() &lt;&lt; endl;\n\tdelete abc;  //用完了记得销毁\n\n\t//创建减法计算器\n\tabc = new SubCalculator;\n\tabc-&gt;m_Num1 = 10;\n\tabc-&gt;m_Num2 = 10;\n\tcout &lt;&lt; abc-&gt;m_Num1 &lt;&lt; &quot; - &quot; &lt;&lt; abc-&gt;m_Num2 &lt;&lt; &quot; = &quot; &lt;&lt; abc-&gt;getResult() &lt;&lt; endl;\n\tdelete abc;  \n&#125;\n\n</code></pre>\n<h4 id=\"72-纯虚函数和抽象类\"><a class=\"markdownIt-Anchor\" href=\"#72-纯虚函数和抽象类\">#</a> 7.2 纯虚函数和抽象类</h4>\n<p>在多态中，通常父类中虚函数的实现是毫无意义的，主要都是调用子类重写的内容，因此可以将虚函数改为<strong>纯虚函数</strong></p>\n<p><strong>纯虚函数语法</strong>： <code>virtual 返回值类型 函数名 （参数列表）= 0 ;</code></p>\n<p>当类中有了纯虚函数，这个类也称为<strong>抽象类</strong></p>\n<p><strong>抽象类特点</strong>：</p>\n<ul>\n<li>无法实例化对象</li>\n<li>子类必须重写抽象类中的纯虚函数，否则也属于抽象类</li>\n</ul>\n<pre><code>#include&lt;iostream&gt;\n#include&lt;string&gt;\nusing namespace std;\n\nclass AbstractDrinking &#123;\npublic:\n        //煮水，冲泡，倒入杯中，放入佐料\n        virtual void Boil() = 0;\n        virtual void Brew() = 0;\n        virtual void PourIntoCup() = 0;\n        virtual void Putsth() = 0;\n        void makeDrink() &#123;\n               Boil();\n               Brew();\n              PourIntoCup();\n              Putsth();\n        &#125;\n&#125;;\n\nclass Coffee :public AbstractDrinking &#123;\npublic:\n        //煮水，冲泡，倒入杯中，放入佐料\n        virtual void Boil() &#123;\n               cout &lt;&lt; &quot;Boil coffee&quot; &lt;&lt; endl;\n        &#125;\n        virtual void Brew() &#123;\n               cout &lt;&lt; &quot;Brew coffee&quot; &lt;&lt; endl;\n        &#125;\n        virtual void PourIntoCup() &#123;\n              cout &lt;&lt; &quot;PourIntoCup coffee&quot; &lt;&lt; endl;\n        &#125;\n        virtual void Putsth() &#123;\n               cout &lt;&lt; &quot;Putsth coffee&quot; &lt;&lt; endl;\n        &#125;\n&#125;;\n\nclass Tea :public AbstractDrinking &#123;\npublic:\n        //煮水，冲泡，倒入杯中，放入佐料\n        virtual void Boil() &#123;\n               cout &lt;&lt; &quot;Boil Tea&quot; &lt;&lt; endl;\n        &#125;\n        virtual void Brew() &#123;\n               cout &lt;&lt; &quot;Brew Tea&quot; &lt;&lt; endl;\n        &#125;\n        virtual void PourIntoCup() &#123;\n              cout &lt;&lt; &quot;PourIntoCup Tea&quot; &lt;&lt; endl;\n        &#125;\n        virtual void Putsth() &#123;\n               cout &lt;&lt; &quot;Putsth Tea&quot; &lt;&lt; endl;\n        &#125;\n&#125;;\n\nvoid doWork(AbstractDrinking* abs) &#123;\n        //父类指针调用接口\n        abs-&gt;makeDrink();\n        delete abs;//释放\n&#125;\n\nvoid test01() &#123;\n        doWork(new Coffee);\n        doWork(new Tea);\n       return;\n&#125;\n\nint main() &#123;\n        test01();\n        system(&quot;pause&quot;);\n        return 0;\n&#125;\n</code></pre>\n<h4 id=\"73-虚析构和纯虚析构\"><a class=\"markdownIt-Anchor\" href=\"#73-虚析构和纯虚析构\">#</a> 7.3 虚析构和纯虚析构</h4>\n<p>多态使用时，如果子类中有属性开辟到堆区，那么父类指针在释放时无法调用到子类的析构代码</p>\n<p><strong>解决方式</strong>：将父类中的析构函数改为虚析构或者纯虚析构</p>\n<p>虚析构和纯虚析构<strong>共性</strong>：</p>\n<ul>\n<li>可以解决父类指针释放子类对象</li>\n<li>都需要有具体的函数实现</li>\n</ul>\n<p>虚析构和纯虚析构<strong>区别</strong>：</p>\n<ul>\n<li>如果是纯虚析构，该类属于抽象类，无法实例化对象</li>\n</ul>\n<p><strong>虚析构语法</strong>： <code>virtual ~类名()&#123;&#125;</code> <br>\n<strong> 纯虚析构语法</strong>： <code>virtual ~类名() = 0;类名::~类名()&#123;&#125;</code></p>\n<p><strong>总结</strong>：</p>\n<ul>\n<li>虚析构或纯虚析构就是用来解决<strong>通过父类指针释放子类对象</strong></li>\n<li>如果子类中没有堆区数据，可以不写为虚析构或纯虚析构</li>\n<li>拥有纯虚析构函数的类也属于抽象类</li>\n</ul>\n<pre><code>class Animal\n&#123;\npublic:\n        Animal()\n        &#123;\n               cout &lt;&lt; &quot;Animal 构造函数调用！&quot; &lt;&lt; endl;\n        &#125;\n        //Speak函数就是纯虚函数\n        virtual void speak() = 0;\n         /*~Animal()\n        &#123;\n               cout &lt;&lt; &quot;Animal析构函数调用！&quot; &lt;&lt; endl;\n        &#125;*/\n        //析构函数加上virtual关键字，变成虚析构函数\n        /*virtual ~Animal()\n        &#123;\n               cout &lt;&lt; &quot;Animal虚析构函数调用！&quot; &lt;&lt; endl;\n        &#125;*/\n        //纯虚析构,使用的时候，必须要类外实现，因为父类也有可能有数据咋堆区\n        //有了纯虚析构之后，类也是抽象类，无法实例化对象\n        virtual ~Animal() = 0;\n&#125;;\n\n//类外实现\nAnimal::~Animal()\n&#123;\n        cout &lt;&lt; &quot;Animal 纯虚析构函数调用！&quot; &lt;&lt; endl;\n&#125;\n\nclass Cat :public Animal\n&#123;\npublic:\n        string *m_Name;\n        Cat(string name)\n        &#123;\n               cout &lt;&lt; &quot;Cat构造函数调用！&quot; &lt;&lt; endl;\n               //堆区创造一个属性\n               m_Name = new string(name);\n        &#125;\n        virtual void speak()\n        &#123;\n               cout &lt;&lt; &quot;小猫在说话&quot; &lt;&lt; endl;\n        &#125;\n        ~Cat()\n        &#123;\n               cout &lt;&lt; &quot;Cat析构函数调用!&quot; &lt;&lt; endl;\n               if (this-&gt;m_Name != NULL) &#123;\n                       delete m_Name;\n                       m_Name = NULL;\n               &#125;\n        &#125;\n&#125;;\n\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "https://empireofyt.github.io/computer-science/cpp/heima/c++%E6%A0%B8%E5%BF%83--%E5%87%BD%E6%95%B0%E9%AB%98%E7%BA%A7/",
            "url": "https://empireofyt.github.io/computer-science/cpp/heima/c++%E6%A0%B8%E5%BF%83--%E5%87%BD%E6%95%B0%E9%AB%98%E7%BA%A7/",
            "title": "c++核心--函数高级",
            "date_published": "2023-02-02T13:10:25.953Z",
            "content_html": "<h2 id=\"函数高级\"><a class=\"markdownIt-Anchor\" href=\"#函数高级\">#</a> 函数高级</h2>\n<h3 id=\"1-函数默认参数\"><a class=\"markdownIt-Anchor\" href=\"#1-函数默认参数\">#</a> 1. 函数默认参数</h3>\n<p>在 C++ 中，函数的形参列表中的形参是可以有默认值的。<br>\n<strong>语法：</strong>  <code>返回值类型 函数名 （参数= 默认值）&#123;&#125;</code> <br>\n<strong> 注意：</strong></p>\n<ul>\n<li>如果某个位置参数有默认值，那么从这个位置往后，从左向右，必须都要有默认值</li>\n<li>函数的声明和实现，只能用一个存在默认值</li>\n</ul>\n<h3 id=\"2-函数的占位参数\"><a class=\"markdownIt-Anchor\" href=\"#2-函数的占位参数\">#</a> 2. 函数的占位参数</h3>\n<p>C++ 中函数的形参列表里可以有占位参数，用来做占位，调用函数时必须填补该位置<br>\n<strong>语法：</strong>  <code>返回值类型 函数名 (数据类型)&#123;&#125;</code></p>\n<pre><code>//函数占位参数 ，占位参数也可以有默认参数\nvoid func(int a, int = 10) &#123;\n//这个=10不写也可\n\tcout &lt;&lt; &quot;this is func&quot; &lt;&lt; endl;\n&#125;\n\nint main() &#123;\n\n\tfunc(10,10); //占位参数必须填补\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<h3 id=\"3-函数重载\"><a class=\"markdownIt-Anchor\" href=\"#3-函数重载\">#</a> 3. 函数重载</h3>\n<p><strong>作用：</strong> 函数名可以相同，提高复用性<br>\n<strong>函数重载满足条件：</strong>   同一个作用域下函数名称相同函数参数类型不同 或者 个数不同 或者 顺序不同<br>\n<strong>注意：</strong> 函数的返回值不可以作为函数重载的条件</p>\n<p><strong>注意事项：</strong></p>\n<ol>\n<li>引用作为重载条件</li>\n<li>函数重载碰到函数默认参数</li>\n</ol>\n<pre><code>//函数重载注意事项\n//1、引用作为重载条件\n\nvoid func(int &amp;a)// int &amp;a = 10 这是不合法的写法\n&#123;\n\tcout &lt;&lt; &quot;func (int &amp;a) 调用 &quot; &lt;&lt; endl;\n&#125;\n\nvoid func(const int &amp;a)  //const int &amp;a = 10; 这是合法的写法\n&#123;\n\tcout &lt;&lt; &quot;func (const int &amp;a) 调用 &quot; &lt;&lt; endl;\n&#125;\n\n\n//2、函数重载碰到函数默认参数\n\nvoid func2(int a, int b = 10)\n&#123;\n\tcout &lt;&lt; &quot;func2(int a, int b = 10) 调用&quot; &lt;&lt; endl;\n&#125;\n\nvoid func2(int a)\n&#123;\n\tcout &lt;&lt; &quot;func2(int a) 调用&quot; &lt;&lt; endl;\n&#125;\n\nint main() &#123;\n\t\n\tint a = 10;\n\tfunc(a); //调用无const\n\tfunc(10);//调用有const\n\n\n\t//func2(10); //碰到默认参数产生歧义，需要避免\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "https://empireofyt.github.io/computer-science/cpp/heima/c++%E6%8F%90%E9%AB%98--STL%E5%87%BD%E6%95%B0%E5%AF%B9%E8%B1%A1/",
            "url": "https://empireofyt.github.io/computer-science/cpp/heima/c++%E6%8F%90%E9%AB%98--STL%E5%87%BD%E6%95%B0%E5%AF%B9%E8%B1%A1/",
            "title": "c++提高--STL函数对象",
            "date_published": "2023-02-02T13:07:49.634Z",
            "content_html": "<h1 id=\"stl-函数对象\"><a class=\"markdownIt-Anchor\" href=\"#stl-函数对象\">#</a> STL- 函数对象</h1>\n<h3 id=\"一-函数对象\"><a class=\"markdownIt-Anchor\" href=\"#一-函数对象\">#</a> 一 函数对象</h3>\n<h4 id=\"11-函数对象概念\"><a class=\"markdownIt-Anchor\" href=\"#11-函数对象概念\">#</a> 1.1 函数对象概念</h4>\n<p><strong>概念：</strong></p>\n<ul>\n<li>重载<strong>函数调用操作符</strong>的类，其对象常称为<strong>函数对象</strong></li>\n<li><strong>函数对象</strong>使用重载的 () 时，行为类似函数调用，也叫<strong>仿函数</strong></li>\n</ul>\n<p><strong>本质：</strong></p>\n<p>函数对象 (仿函数) 是一个<strong>类</strong>，不是一个函数</p>\n<h4 id=\"12-函数对象使用\"><a class=\"markdownIt-Anchor\" href=\"#12-函数对象使用\">#</a> 1.2  函数对象使用</h4>\n<p><strong>特点：</strong></p>\n<ul>\n<li>函数对象在使用时，可以像普通函数那样调用，可以有参数，可以有返回值</li>\n<li>函数对象超出普通函数的概念，函数对象可以有自己的状态</li>\n<li>函数对象可以作为参数传递</li>\n</ul>\n<p><strong>示例:</strong></p>\n<pre><code class=\"language-C++\">#include &lt;string&gt;\n\n//1、函数对象在使用时，可以像普通函数那样调用, 可以有参数，可以有返回值\nclass MyAdd\n&#123;\npublic :\n\tint operator()(int v1,int v2)\n\t&#123;\n\t\treturn v1 + v2;\n\t&#125;\n&#125;;\n\nvoid test01()\n&#123;\n\tMyAdd myAdd;\n\tcout &lt;&lt; myAdd(10, 10) &lt;&lt; endl;\n&#125;\n\n//2、函数对象可以有自己的状态\nclass MyPrint\n&#123;\npublic:\n\tMyPrint()\n\t&#123;\n\t\tcount = 0;\n\t&#125;\n\tvoid operator()(string test)\n\t&#123;\n\t\tcout &lt;&lt; test &lt;&lt; endl;\n\t\tcount++; //统计使用次数\n\t&#125;\n\n\tint count; //内部自己的状态\n&#125;;\nvoid test02()\n&#123;\n\tMyPrint myPrint;\n\tmyPrint(&quot;hello world&quot;);\n\tmyPrint(&quot;hello world&quot;);\n\tmyPrint(&quot;hello world&quot;);\n\tcout &lt;&lt; &quot;myPrint调用次数为： &quot; &lt;&lt; myPrint.count &lt;&lt; endl;\n&#125;\n\n//3、函数对象可以作为参数传递\nvoid doPrint(MyPrint &amp;mp , string test)\n&#123;\n\tmp(test);\n&#125;\n\nvoid test03()\n&#123;\n\tMyPrint myPrint;\n\tdoPrint(myPrint, &quot;Hello C++&quot;);\n&#125;\n\nint main() &#123;\n\n\t//test01();\n\t//test02();\n\ttest03();\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<p>总结：</p>\n<ul>\n<li>仿函数写法非常灵活，可以作为参数进行传递。</li>\n</ul>\n<h3 id=\"二-谓词\"><a class=\"markdownIt-Anchor\" href=\"#二-谓词\">#</a> 二  谓词</h3>\n<h4 id=\"21-谓词概念\"><a class=\"markdownIt-Anchor\" href=\"#21-谓词概念\">#</a> 2.1 谓词概念</h4>\n<p><strong>概念：</strong></p>\n<ul>\n<li>返回 bool 类型的仿函数称为<strong>谓词</strong></li>\n<li>如果 operator () 接受一个参数，那么叫做一元谓词</li>\n<li>如果 operator () 接受两个参数，那么叫做二元谓词</li>\n</ul>\n<h4 id=\"22-一元谓词\"><a class=\"markdownIt-Anchor\" href=\"#22-一元谓词\">#</a> 2.2 一元谓词</h4>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">#include &lt;vector&gt;\n#include &lt;algorithm&gt;\n\n//1.一元谓词\nstruct GreaterFive&#123;\n\tbool operator()(int val) &#123;\n\t\treturn val &gt; 5;\n\t&#125;\n&#125;;\n\nvoid test01() &#123;\n\n\tvector&lt;int&gt; v;\n\tfor (int i = 0; i &lt; 10; i++)\n\t&#123;\n\t\tv.push_back(i);\n\t&#125;\n\n\tvector&lt;int&gt;::iterator it = find_if(v.begin(), v.end(), GreaterFive());\n\tif (it == v.end()) &#123;\n\t\tcout &lt;&lt; &quot;没找到!&quot; &lt;&lt; endl;\n\t&#125;\n\telse &#123;\n\t\tcout &lt;&lt; &quot;找到:&quot; &lt;&lt; *it &lt;&lt; endl;\n\t&#125;\n\n&#125;\n\nint main() &#123;\n\n\ttest01();\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<p>总结：参数只有一个的谓词，称为一元谓词</p>\n<h4 id=\"23-二元谓词\"><a class=\"markdownIt-Anchor\" href=\"#23-二元谓词\">#</a> 2.3 二元谓词</h4>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">#include &lt;vector&gt;\n#include &lt;algorithm&gt;\n//二元谓词\nclass MyCompare\n&#123;\npublic:\n\tbool operator()(int num1, int num2)\n\t&#123;\n\t\treturn num1 &gt; num2;\n\t&#125;\n&#125;;\n\nvoid test01()\n&#123;\n\tvector&lt;int&gt; v;\n\tv.push_back(10);\n\tv.push_back(40);\n\tv.push_back(20);\n\tv.push_back(30);\n\tv.push_back(50);\n\n\t//默认从小到大\n\tsort(v.begin(), v.end());\n\tfor (vector&lt;int&gt;::iterator it = v.begin(); it != v.end(); it++)\n\t&#123;\n\t\tcout &lt;&lt; *it &lt;&lt; &quot; &quot;;\n\t&#125;\n\tcout &lt;&lt; endl;\n\tcout &lt;&lt; &quot;----------------------------&quot; &lt;&lt; endl;\n\n\t//使用函数对象改变算法策略，排序从大到小\n\tsort(v.begin(), v.end(), MyCompare());\n\tfor (vector&lt;int&gt;::iterator it = v.begin(); it != v.end(); it++)\n\t&#123;\n\t\tcout &lt;&lt; *it &lt;&lt; &quot; &quot;;\n\t&#125;\n\tcout &lt;&lt; endl;\n&#125;\n\nint main() &#123;\n\n\ttest01();\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<p>总结：参数只有两个的谓词，称为二元谓词</p>\n<h3 id=\"三-内建函数对象\"><a class=\"markdownIt-Anchor\" href=\"#三-内建函数对象\">#</a> 三 内建函数对象</h3>\n<h4 id=\"31-内建函数对象意义\"><a class=\"markdownIt-Anchor\" href=\"#31-内建函数对象意义\">#</a> 3.1 内建函数对象意义</h4>\n<p><strong>概念：</strong></p>\n<ul>\n<li>STL 内建了一些函数对象</li>\n</ul>\n<p><strong>分类:</strong></p>\n<ul>\n<li>\n<p>算术仿函数</p>\n</li>\n<li>\n<p>关系仿函数</p>\n</li>\n<li>\n<p>逻辑仿函数</p>\n</li>\n</ul>\n<p><strong>用法：</strong></p>\n<ul>\n<li>这些仿函数所产生的对象，用法和一般函数完全相同</li>\n<li>使用内建函数对象，需要引入头文件  <code>#include&lt;functional&gt;</code></li>\n</ul>\n<h4 id=\"32-算术仿函数\"><a class=\"markdownIt-Anchor\" href=\"#32-算术仿函数\">#</a> 3.2 算术仿函数</h4>\n<p><strong>功能描述：</strong></p>\n<ul>\n<li>实现四则运算</li>\n<li>其中 negate 是一元运算，其他都是二元运算</li>\n</ul>\n<p><strong>仿函数原型：</strong></p>\n<ul>\n<li><code>template&lt;class T&gt; T plus&lt;T&gt;</code>                 // 加法仿函数</li>\n<li><code>template&lt;class T&gt; T minus&lt;T&gt;</code>               // 减法仿函数</li>\n<li><code>template&lt;class T&gt; T multiplies&lt;T&gt;</code>     // 乘法仿函数</li>\n<li><code>template&lt;class T&gt; T divides&lt;T&gt;</code>          // 除法仿函数</li>\n<li><code>template&lt;class T&gt; T modulus&lt;T&gt;</code>          // 取模仿函数</li>\n<li><code>template&lt;class T&gt; T negate&lt;T&gt;</code>            // 取反仿函数</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">#include &lt;functional&gt;\n//negate\nvoid test01()\n&#123;\n\tnegate&lt;int&gt; n;\n\tcout &lt;&lt; n(50) &lt;&lt; endl;\n&#125;\n\n//plus\nvoid test02()\n&#123;\n\tplus&lt;int&gt; p;\n\tcout &lt;&lt; p(10, 20) &lt;&lt; endl;\n&#125;\n\nint main() &#123;\n\n\ttest01();\n\ttest02();\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<p>总结：使用内建函数对象时，需要引入头文件  <code>#include &lt;functional&gt;</code></p>\n<h4 id=\"33-关系仿函数\"><a class=\"markdownIt-Anchor\" href=\"#33-关系仿函数\">#</a> 3.3 关系仿函数</h4>\n<p><strong>功能描述：</strong></p>\n<ul>\n<li>实现关系对比</li>\n</ul>\n<p><strong>仿函数原型：</strong></p>\n<ul>\n<li><code>template&lt;class T&gt; bool equal_to&lt;T&gt;</code>                     // 等于</li>\n<li><code>template&lt;class T&gt; bool not_equal_to&lt;T&gt;</code>             // 不等于</li>\n<li><code>template&lt;class T&gt; bool greater&lt;T&gt;</code>                       // 大于</li>\n<li><code>template&lt;class T&gt; bool greater_equal&lt;T&gt;</code>           // 大于等于</li>\n<li><code>template&lt;class T&gt; bool less&lt;T&gt;</code>                            // 小于</li>\n<li><code>template&lt;class T&gt; bool less_equal&lt;T&gt;</code>                // 小于等于</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">#include &lt;functional&gt;\n#include &lt;vector&gt;\n#include &lt;algorithm&gt;\n\nclass MyCompare\n&#123;\npublic:\n\tbool operator()(int v1,int v2)\n\t&#123;\n\t\treturn v1 &gt; v2;\n\t&#125;\n&#125;;\nvoid test01()\n&#123;\n\tvector&lt;int&gt; v;\n\n\tv.push_back(10);\n\tv.push_back(30);\n\tv.push_back(50);\n\tv.push_back(40);\n\tv.push_back(20);\n\n\tfor (vector&lt;int&gt;::iterator it = v.begin(); it != v.end(); it++) &#123;\n\t\tcout &lt;&lt; *it &lt;&lt; &quot; &quot;;\n\t&#125;\n\tcout &lt;&lt; endl;\n\n\t//自己实现仿函数\n\t//sort(v.begin(), v.end(), MyCompare());\n\t//STL内建仿函数  大于仿函数\n\tsort(v.begin(), v.end(), greater&lt;int&gt;());\n\n\tfor (vector&lt;int&gt;::iterator it = v.begin(); it != v.end(); it++) &#123;\n\t\tcout &lt;&lt; *it &lt;&lt; &quot; &quot;;\n\t&#125;\n\tcout &lt;&lt; endl;\n&#125;\n\nint main() &#123;\n\n\ttest01();\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<p>总结：关系仿函数中最常用的就是 greater&lt;&gt; 大于</p>\n<h4 id=\"34-逻辑仿函数\"><a class=\"markdownIt-Anchor\" href=\"#34-逻辑仿函数\">#</a> 3.4 逻辑仿函数</h4>\n<p><strong>功能描述：</strong></p>\n<ul>\n<li>实现逻辑运算</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li><code>template&lt;class T&gt; bool logical_and&lt;T&gt;</code>               // 逻辑与</li>\n<li><code>template&lt;class T&gt; bool logical_or&lt;T&gt;</code>                 // 逻辑或</li>\n<li><code>template&lt;class T&gt; bool logical_not&lt;T&gt;</code>               // 逻辑非</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">#include &lt;vector&gt;\n#include &lt;functional&gt;\n#include &lt;algorithm&gt;\nvoid test01()\n&#123;\n\tvector&lt;bool&gt; v;\n\tv.push_back(true);\n\tv.push_back(false);\n\tv.push_back(true);\n\tv.push_back(false);\n\n\tfor (vector&lt;bool&gt;::iterator it = v.begin();it!= v.end();it++)\n\t&#123;\n\t\tcout &lt;&lt; *it &lt;&lt; &quot; &quot;;\n\t&#125;\n\tcout &lt;&lt; endl;\n\n\t//逻辑非  将v容器搬运到v2中，并执行逻辑非运算\n\tvector&lt;bool&gt; v2;\n\tv2.resize(v.size());\n\ttransform(v.begin(), v.end(),  v2.begin(), logical_not&lt;bool&gt;());\n\tfor (vector&lt;bool&gt;::iterator it = v2.begin(); it != v2.end(); it++)\n\t&#123;\n\t\tcout &lt;&lt; *it &lt;&lt; &quot; &quot;;\n\t&#125;\n\tcout &lt;&lt; endl;\n&#125;\n\nint main() &#123;\n\n\ttest01();\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<p>总结：逻辑仿函数实际应用较少，了解即可</p>\n",
            "tags": []
        },
        {
            "id": "https://empireofyt.github.io/computer-science/cpp/heima/c++%E6%8F%90%E9%AB%98--STL%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95/",
            "url": "https://empireofyt.github.io/computer-science/cpp/heima/c++%E6%8F%90%E9%AB%98--STL%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95/",
            "title": "c++提高--STL常见算法",
            "date_published": "2023-02-02T13:06:56.141Z",
            "content_html": "<h1 id=\"stl-常用算法\"><a class=\"markdownIt-Anchor\" href=\"#stl-常用算法\">#</a> STL- 常用算法</h1>\n<p><strong>概述</strong>:</p>\n<ul>\n<li>\n<p>算法主要是由头文件 <code>&lt;algorithm&gt;</code>   <code>&lt;functional&gt;</code>   <code>&lt;numeric&gt;</code>  组成。</p>\n</li>\n<li>\n<p><code>&lt;algorithm&gt;</code>  是所有 STL 头文件中最大的一个，范围涉及到比较、 交换、查找、遍历操作、复制、修改等等</p>\n</li>\n<li>\n<p><code>&lt;numeric&gt;</code>  体积很小，只包括几个在序列上面进行简单数学运算的模板函数</p>\n</li>\n<li>\n<p><code>&lt;functional&gt;</code>  定义了一些模板类，用以声明函数对象。</p>\n</li>\n</ul>\n<h3 id=\"1-常用遍历算法\"><a class=\"markdownIt-Anchor\" href=\"#1-常用遍历算法\">#</a> 1 常用遍历算法</h3>\n<p><strong>学习目标：</strong></p>\n<ul>\n<li>掌握常用的遍历算法</li>\n</ul>\n<p><strong>算法简介：</strong></p>\n<ul>\n<li><code>for_each</code>      // 遍历容器</li>\n<li><code>transform</code>    // 搬运容器到另一个容器中</li>\n</ul>\n<h4 id=\"11-for_each\"><a class=\"markdownIt-Anchor\" href=\"#11-for_each\">#</a> 1.1 for_each</h4>\n<p><strong>功能描述：</strong></p>\n<ul>\n<li>实现遍历容器</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li>\n<p><code>for_each(iterator beg, iterator end, _func);  </code></p>\n<p>// 遍历算法 遍历容器元素</p>\n<p>//beg 开始迭代器</p>\n<p>//end 结束迭代器</p>\n<p>//_func 函数或者函数对象</p>\n</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">#include &lt;algorithm&gt;\n#include &lt;vector&gt;\n\n//普通函数\nvoid print01(int val) \n&#123;\n\tcout &lt;&lt; val &lt;&lt; &quot; &quot;;\n&#125;\n//函数对象\nclass print02 \n&#123;\n public:\n\tvoid operator()(int val) \n\t&#123;\n\t\tcout &lt;&lt; val &lt;&lt; &quot; &quot;;\n\t&#125;\n&#125;;\n\n//for_each算法基本用法\nvoid test01() &#123;\n\n\tvector&lt;int&gt; v;\n\tfor (int i = 0; i &lt; 10; i++) \n\t&#123;\n\t\tv.push_back(i);\n\t&#125;\n\n\t//遍历算法\n\tfor_each(v.begin(), v.end(), print01);\n\tcout &lt;&lt; endl;\n\n\tfor_each(v.begin(), v.end(), print02());\n\tcout &lt;&lt; endl;\n&#125;\n\nint main() &#123;\n\n\ttest01();\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<p>** 总结：**for_each 在实际开发中是最常用遍历算法，需要熟练掌握</p>\n<h4 id=\"12-transform\"><a class=\"markdownIt-Anchor\" href=\"#12-transform\">#</a> 1.2 transform</h4>\n<p><strong>功能描述：</strong></p>\n<ul>\n<li>搬运容器到另一个容器中</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li><code>transform(iterator beg1, iterator end1, iterator beg2, _func);</code></li>\n</ul>\n<p>//beg1 源容器开始迭代器</p>\n<p>//end1 源容器结束迭代器</p>\n<p>//beg2 目标容器开始迭代器</p>\n<p>//_func 函数或者函数对象</p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">#include&lt;vector&gt;\n#include&lt;algorithm&gt;\n\n//常用遍历算法  搬运 transform\n\nclass TransForm\n&#123;\npublic:\n\tint operator()(int val)\n\t&#123;\n\t\treturn val;\n\t&#125;\n\n&#125;;\n\nclass MyPrint\n&#123;\npublic:\n\tvoid operator()(int val)\n\t&#123;\n\t\tcout &lt;&lt; val &lt;&lt; &quot; &quot;;\n\t&#125;\n&#125;;\n\nvoid test01()\n&#123;\n\tvector&lt;int&gt;v;\n\tfor (int i = 0; i &lt; 10; i++)\n\t&#123;\n\t\tv.push_back(i);\n\t&#125;\n\n\tvector&lt;int&gt;vTarget; //目标容器\n\n\tvTarget.resize(v.size()); // 目标容器需要提前开辟空间\n\n\ttransform(v.begin(), v.end(), vTarget.begin(), TransForm());\n\n\tfor_each(vTarget.begin(), vTarget.end(), MyPrint());\n&#125;\n\nint main() &#123;\n\n\ttest01();\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<p><strong>总结：</strong> 搬运的目标容器必须要提前开辟空间，否则无法正常搬运</p>\n<h3 id=\"2-常用查找算法\"><a class=\"markdownIt-Anchor\" href=\"#2-常用查找算法\">#</a> 2 常用查找算法</h3>\n<p>学习目标：</p>\n<ul>\n<li>掌握常用的查找算法</li>\n</ul>\n<p><strong>算法简介：</strong></p>\n<ul>\n<li><code>find</code>                      // 查找元素</li>\n<li><code>find_if</code>                // 按条件查找元素</li>\n<li><code>adjacent_find</code>     // 查找相邻重复元素</li>\n<li><code>binary_search</code>     // 二分查找法</li>\n<li><code>count</code>                    // 统计元素个数</li>\n<li><code>count_if</code>              // 按条件统计元素个数</li>\n</ul>\n<h4 id=\"21-find\"><a class=\"markdownIt-Anchor\" href=\"#21-find\">#</a> 2.1 find</h4>\n<p><strong>功能描述：</strong></p>\n<ul>\n<li>查找指定元素，找到返回指定元素的迭代器，找不到返回结束迭代器 end ()</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li>\n<p><code>find(iterator beg, iterator end, value);  </code></p>\n<p>// 按值查找元素，找到返回指定位置迭代器，找不到返回结束迭代器位置</p>\n<p>//beg 开始迭代器</p>\n<p>//end 结束迭代器</p>\n<p>//value 查找的元素</p>\n</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">#include &lt;algorithm&gt;\n#include &lt;vector&gt;\n#include &lt;string&gt;\nvoid test01() &#123;\n\n\tvector&lt;int&gt; v;\n\tfor (int i = 0; i &lt; 10; i++) &#123;\n\t\tv.push_back(i + 1);\n\t&#125;\n\t//查找容器中是否有 5 这个元素\n\tvector&lt;int&gt;::iterator it = find(v.begin(), v.end(), 5);\n\tif (it == v.end()) \n\t&#123;\n\t\tcout &lt;&lt; &quot;没有找到!&quot; &lt;&lt; endl;\n\t&#125;\n\telse \n\t&#123;\n\t\tcout &lt;&lt; &quot;找到:&quot; &lt;&lt; *it &lt;&lt; endl;\n\t&#125;\n&#125;\n\nclass Person &#123;\npublic:\n\tPerson(string name, int age) \n\t&#123;\n\t\tthis-&gt;m_Name = name;\n\t\tthis-&gt;m_Age = age;\n\t&#125;\n\t//重载==\n\tbool operator==(const Person&amp; p) \n\t&#123;\n\t\tif (this-&gt;m_Name == p.m_Name &amp;&amp; this-&gt;m_Age == p.m_Age) \n\t\t&#123;\n\t\t\treturn true;\n\t\t&#125;\n\t\treturn false;\n\t&#125;\n\npublic:\n\tstring m_Name;\n\tint m_Age;\n&#125;;\n\nvoid test02() &#123;\n\n\tvector&lt;Person&gt; v;\n\n\t//创建数据\n\tPerson p1(&quot;aaa&quot;, 10);\n\tPerson p2(&quot;bbb&quot;, 20);\n\tPerson p3(&quot;ccc&quot;, 30);\n\tPerson p4(&quot;ddd&quot;, 40);\n\n\tv.push_back(p1);\n\tv.push_back(p2);\n\tv.push_back(p3);\n\tv.push_back(p4);\n\n\tvector&lt;Person&gt;::iterator it = find(v.begin(), v.end(), p2);\n\tif (it == v.end()) \n\t&#123;\n\t\tcout &lt;&lt; &quot;没有找到!&quot; &lt;&lt; endl;\n\t&#125;\n\telse \n\t&#123;\n\t\tcout &lt;&lt; &quot;找到姓名:&quot; &lt;&lt; it-&gt;m_Name &lt;&lt; &quot; 年龄: &quot; &lt;&lt; it-&gt;m_Age &lt;&lt; endl;\n\t&#125;\n&#125;\n</code></pre>\n<p>总结： 利用 find 可以在容器中找指定的元素，返回值是<strong>迭代器</strong></p>\n<h4 id=\"22-find_if\"><a class=\"markdownIt-Anchor\" href=\"#22-find_if\">#</a> 2.2 find_if</h4>\n<p><strong>功能描述：</strong></p>\n<ul>\n<li>按条件查找元素</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li>\n<p><code>find_if(iterator beg, iterator end, _Pred);  </code></p>\n<p>// 按值查找元素，找到返回指定位置迭代器，找不到返回结束迭代器位置</p>\n<p>//beg 开始迭代器</p>\n<p>//end 结束迭代器</p>\n<p>//_Pred 函数或者谓词（返回 bool 类型的仿函数）</p>\n</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">#include &lt;algorithm&gt;\n#include &lt;vector&gt;\n#include &lt;string&gt;\n\n//内置数据类型\nclass GreaterFive\n&#123;\npublic:\n\tbool operator()(int val)\n\t&#123;\n\t\treturn val &gt; 5;\n\t&#125;\n&#125;;\n\nvoid test01() &#123;\n\n\tvector&lt;int&gt; v;\n\tfor (int i = 0; i &lt; 10; i++) &#123;\n\t\tv.push_back(i + 1);\n\t&#125;\n\n\tvector&lt;int&gt;::iterator it = find_if(v.begin(), v.end(), GreaterFive());\n\tif (it == v.end()) &#123;\n\t\tcout &lt;&lt; &quot;没有找到!&quot; &lt;&lt; endl;\n\t&#125;\n\telse &#123;\n\t\tcout &lt;&lt; &quot;找到大于5的数字:&quot; &lt;&lt; *it &lt;&lt; endl;\n\t&#125;\n&#125;\n\n//自定义数据类型\nclass Person &#123;\npublic:\n\tPerson(string name, int age)\n\t&#123;\n\t\tthis-&gt;m_Name = name;\n\t\tthis-&gt;m_Age = age;\n\t&#125;\npublic:\n\tstring m_Name;\n\tint m_Age;\n&#125;;\n\nclass Greater20\n&#123;\npublic:\n\tbool operator()(Person &amp;p)\n\t&#123;\n\t\treturn p.m_Age &gt; 20;\n\t&#125;\n\n&#125;;\n\nvoid test02() &#123;\n\n\tvector&lt;Person&gt; v;\n\n\t//创建数据\n\tPerson p1(&quot;aaa&quot;, 10);\n\tPerson p2(&quot;bbb&quot;, 20);\n\tPerson p3(&quot;ccc&quot;, 30);\n\tPerson p4(&quot;ddd&quot;, 40);\n\n\tv.push_back(p1);\n\tv.push_back(p2);\n\tv.push_back(p3);\n\tv.push_back(p4);\n\n\tvector&lt;Person&gt;::iterator it = find_if(v.begin(), v.end(), Greater20());\n\tif (it == v.end())\n\t&#123;\n\t\tcout &lt;&lt; &quot;没有找到!&quot; &lt;&lt; endl;\n\t&#125;\n\telse\n\t&#123;\n\t\tcout &lt;&lt; &quot;找到姓名:&quot; &lt;&lt; it-&gt;m_Name &lt;&lt; &quot; 年龄: &quot; &lt;&lt; it-&gt;m_Age &lt;&lt; endl;\n\t&#125;\n&#125;\n\nint main() &#123;\n\n\t//test01();\n\n\ttest02();\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<p>总结：find_if 按条件查找使查找更加灵活，提供的仿函数可以改变不同的策略</p>\n<h4 id=\"23-adjacent_find\"><a class=\"markdownIt-Anchor\" href=\"#23-adjacent_find\">#</a> 2.3 adjacent_find</h4>\n<p><strong>功能描述：</strong></p>\n<ul>\n<li>查找相邻重复元素</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li>\n<p><code>adjacent_find(iterator beg, iterator end);  </code></p>\n<p>// 查找相邻重复元素，返回相邻元素的第一个位置的迭代器</p>\n<p>//beg 开始迭代器</p>\n<p>//end 结束迭代器</p>\n</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">#include &lt;algorithm&gt;\n#include &lt;vector&gt;\n\nvoid test01()\n&#123;\n\tvector&lt;int&gt; v;\n\tv.push_back(1);\n\tv.push_back(2);\n\tv.push_back(5);\n\tv.push_back(2);\n\tv.push_back(4);\n\tv.push_back(4);\n\tv.push_back(3);\n\n\t//查找相邻重复元素\n\tvector&lt;int&gt;::iterator it = adjacent_find(v.begin(), v.end());\n\tif (it == v.end()) &#123;\n\t\tcout &lt;&lt; &quot;找不到!&quot; &lt;&lt; endl;\n\t&#125;\n\telse &#123;\n\t\tcout &lt;&lt; &quot;找到相邻重复元素为:&quot; &lt;&lt; *it &lt;&lt; endl;\n\t&#125;\n&#125;\n</code></pre>\n<p>总结：面试题中如果出现查找相邻重复元素，记得用 STL 中的 adjacent_find 算法</p>\n<h4 id=\"24-binary_search\"><a class=\"markdownIt-Anchor\" href=\"#24-binary_search\">#</a> 2.4 binary_search</h4>\n<p><strong>功能描述：</strong></p>\n<ul>\n<li>查找指定元素是否存在</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li>\n<p><code>bool binary_search(iterator beg, iterator end, value);  </code></p>\n<p>// 查找指定的元素，查到 返回 true  否则 false</p>\n<p>// 注意：在<strong>无序序列中不可用</strong></p>\n<p>//beg 开始迭代器</p>\n<p>//end 结束迭代器</p>\n<p>//value 查找的元素</p>\n</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">#include &lt;algorithm&gt;\n#include &lt;vector&gt;\n\nvoid test01()\n&#123;\n\tvector&lt;int&gt;v;\n\n\tfor (int i = 0; i &lt; 10; i++)\n\t&#123;\n\t\tv.push_back(i);\n\t&#125;\n\t//二分查找\n\tbool ret = binary_search(v.begin(), v.end(),2);\n\tif (ret)\n\t&#123;\n\t\tcout &lt;&lt; &quot;找到了&quot; &lt;&lt; endl;\n\t&#125;\n\telse\n\t&#123;\n\t\tcout &lt;&lt; &quot;未找到&quot; &lt;&lt; endl;\n\t&#125;\n&#125;\n\nint main() &#123;\n\n\ttest01();\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<p>** 总结：** 二分查找法查找效率很高，值得注意的是查找的容器中元素必须的有序序列</p>\n<h4 id=\"25-count\"><a class=\"markdownIt-Anchor\" href=\"#25-count\">#</a> 2.5 count</h4>\n<p><strong>功能描述：</strong></p>\n<ul>\n<li>统计元素个数</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li>\n<p><code>count(iterator beg, iterator end, value);  </code></p>\n<p>// 统计元素出现次数</p>\n<p>//beg 开始迭代器</p>\n<p>//end 结束迭代器</p>\n<p>//value 统计的元素</p>\n</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">#include &lt;algorithm&gt;\n#include &lt;vector&gt;\n\n//内置数据类型\nvoid test01()\n&#123;\n\tvector&lt;int&gt; v;\n\tv.push_back(1);\n\tv.push_back(2);\n\tv.push_back(4);\n\tv.push_back(5);\n\tv.push_back(3);\n\tv.push_back(4);\n\tv.push_back(4);\n\n\tint num = count(v.begin(), v.end(), 4);\n\n\tcout &lt;&lt; &quot;4的个数为： &quot; &lt;&lt; num &lt;&lt; endl;\n&#125;\n\n//自定义数据类型\nclass Person\n&#123;\npublic:\n\tPerson(string name, int age)\n\t&#123;\n\t\tthis-&gt;m_Name = name;\n\t\tthis-&gt;m_Age = age;\n\t&#125;\n\tbool operator==(const Person &amp; p)\n\t&#123;\n\t\tif (this-&gt;m_Age == p.m_Age)\n\t\t&#123;\n\t\t\treturn true;\n\t\t&#125;\n\t\telse\n\t\t&#123;\n\t\t\treturn false;\n\t\t&#125;\n\t&#125;\n\tstring m_Name;\n\tint m_Age;\n&#125;;\n\nvoid test02()\n&#123;\n\tvector&lt;Person&gt; v;\n\n\tPerson p1(&quot;刘备&quot;, 35);\n\tPerson p2(&quot;关羽&quot;, 35);\n\tPerson p3(&quot;张飞&quot;, 35);\n\tPerson p4(&quot;赵云&quot;, 30);\n\tPerson p5(&quot;曹操&quot;, 25);\n\n\tv.push_back(p1);\n\tv.push_back(p2);\n\tv.push_back(p3);\n\tv.push_back(p4);\n\tv.push_back(p5);\n    \n    Person p(&quot;诸葛亮&quot;,35);\n\n\tint num = count(v.begin(), v.end(), p);\n\tcout &lt;&lt; &quot;num = &quot; &lt;&lt; num &lt;&lt; endl;\n&#125;\nint main() &#123;\n\n\t//test01();\n\n\ttest02();\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<p><strong>总结：</strong> 统计自定义数据类型时候，需要配合重载  <code>operator==</code></p>\n<h4 id=\"26-count_if\"><a class=\"markdownIt-Anchor\" href=\"#26-count_if\">#</a> 2.6 count_if</h4>\n<p><strong>功能描述：</strong></p>\n<ul>\n<li>按条件统计元素个数</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li>\n<p><code>count_if(iterator beg, iterator end, _Pred);  </code></p>\n<p>// 按条件统计元素出现次数</p>\n<p>//beg 开始迭代器</p>\n<p>//end 结束迭代器</p>\n<p>//_Pred 谓词</p>\n</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">#include &lt;algorithm&gt;\n#include &lt;vector&gt;\n\nclass Greater4\n&#123;\npublic:\n\tbool operator()(int val)\n\t&#123;\n\t\treturn val &gt;= 4;\n\t&#125;\n&#125;;\n\n//内置数据类型\nvoid test01()\n&#123;\n\tvector&lt;int&gt; v;\n\tv.push_back(1);\n\tv.push_back(2);\n\tv.push_back(4);\n\tv.push_back(5);\n\tv.push_back(3);\n\tv.push_back(4);\n\tv.push_back(4);\n\n\tint num = count_if(v.begin(), v.end(), Greater4());\n\n\tcout &lt;&lt; &quot;大于4的个数为： &quot; &lt;&lt; num &lt;&lt; endl;\n&#125;\n\n//自定义数据类型\nclass Person\n&#123;\npublic:\n\tPerson(string name, int age)\n\t&#123;\n\t\tthis-&gt;m_Name = name;\n\t\tthis-&gt;m_Age = age;\n\t&#125;\n\n\tstring m_Name;\n\tint m_Age;\n&#125;;\n\nclass AgeLess35\n&#123;\npublic:\n\tbool operator()(const Person &amp;p)\n\t&#123;\n\t\treturn p.m_Age &lt; 35;\n\t&#125;\n&#125;;\nvoid test02()\n&#123;\n\tvector&lt;Person&gt; v;\n\n\tPerson p1(&quot;刘备&quot;, 35);\n\tPerson p2(&quot;关羽&quot;, 35);\n\tPerson p3(&quot;张飞&quot;, 35);\n\tPerson p4(&quot;赵云&quot;, 30);\n\tPerson p5(&quot;曹操&quot;, 25);\n\n\tv.push_back(p1);\n\tv.push_back(p2);\n\tv.push_back(p3);\n\tv.push_back(p4);\n\tv.push_back(p5);\n\n\tint num = count_if(v.begin(), v.end(), AgeLess35());\n\tcout &lt;&lt; &quot;小于35岁的个数：&quot; &lt;&lt; num &lt;&lt; endl;\n&#125;\n\n\nint main() &#123;\n\n\t//test01();\n\n\ttest02();\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<p>** 总结：** 按值统计用 count，按条件统计用 count_if</p>\n<h3 id=\"3-常用排序算法\"><a class=\"markdownIt-Anchor\" href=\"#3-常用排序算法\">#</a> 3 常用排序算法</h3>\n<p><strong>学习目标：</strong></p>\n<ul>\n<li>掌握常用的排序算法</li>\n</ul>\n<p><strong>算法简介：</strong></p>\n<ul>\n<li><code>sort</code>              // 对容器内元素进行排序</li>\n<li><code>random_shuffle</code>    // 洗牌   指定范围内的元素随机调整次序</li>\n<li><code>merge </code>            // 容器元素合并，并存储到另一容器中</li>\n<li><code>reverse</code>        // 反转指定范围的元素</li>\n</ul>\n<h4 id=\"31-sort\"><a class=\"markdownIt-Anchor\" href=\"#31-sort\">#</a> 3.1 sort</h4>\n<p><strong>功能描述：</strong></p>\n<ul>\n<li>对容器内元素进行排序</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li>\n<p><code>sort(iterator beg, iterator end, _Pred);  </code></p>\n<p>// 按值查找元素，找到返回指定位置迭代器，找不到返回结束迭代器位置</p>\n<p>//  beg    开始迭代器</p>\n<p>//  end    结束迭代器</p>\n<p>//_Pred  谓词</p>\n</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-c++\">#include &lt;algorithm&gt;\n#include &lt;vector&gt;\n\nvoid myPrint(int val)\n&#123;\n\tcout &lt;&lt; val &lt;&lt; &quot; &quot;;\n&#125;\n\nvoid test01() &#123;\n\tvector&lt;int&gt; v;\n\tv.push_back(10);\n\tv.push_back(30);\n\tv.push_back(50);\n\tv.push_back(20);\n\tv.push_back(40);\n\n\t//sort默认从小到大排序\n\tsort(v.begin(), v.end());\n\tfor_each(v.begin(), v.end(), myPrint);\n\tcout &lt;&lt; endl;\n\n\t//从大到小排序\n\tsort(v.begin(), v.end(), greater&lt;int&gt;());\n\tfor_each(v.begin(), v.end(), myPrint);\n\tcout &lt;&lt; endl;\n&#125;\n\nint main() &#123;\n\n\ttest01();\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<p>** 总结：**sort 属于开发中最常用的算法之一，需熟练掌握</p>\n<h4 id=\"32-random_shuffle\"><a class=\"markdownIt-Anchor\" href=\"#32-random_shuffle\">#</a> 3.2 random_shuffle</h4>\n<p><strong>功能描述：</strong></p>\n<ul>\n<li>洗牌   指定范围内的元素随机调整次序</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li>\n<p><code>random_shuffle(iterator beg, iterator end);  </code></p>\n<p>// 指定范围内的元素随机调整次序</p>\n<p>//beg 开始迭代器</p>\n<p>//end 结束迭代器</p>\n</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-c++\">#include &lt;algorithm&gt;\n#include &lt;vector&gt;\n#include &lt;ctime&gt;\n\nclass myPrint\n&#123;\npublic:\n\tvoid operator()(int val)\n\t&#123;\n\t\tcout &lt;&lt; val &lt;&lt; &quot; &quot;;\n\t&#125;\n&#125;;\n\nvoid test01()\n&#123;\n\tsrand((unsigned int)time(NULL));\n\tvector&lt;int&gt; v;\n\tfor(int i = 0 ; i &lt; 10;i++)\n\t&#123;\n\t\tv.push_back(i);\n\t&#125;\n\tfor_each(v.begin(), v.end(), myPrint());\n\tcout &lt;&lt; endl;\n\n\t//打乱顺序\n\trandom_shuffle(v.begin(), v.end());\n\tfor_each(v.begin(), v.end(), myPrint());\n\tcout &lt;&lt; endl;\n&#125;\n\nint main() &#123;\n\n\ttest01();\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<p>** 总结：**random_shuffle 洗牌算法比较实用，使用时记得加随机数种子</p>\n<h4 id=\"33-merge\"><a class=\"markdownIt-Anchor\" href=\"#33-merge\">#</a> 3.3 merge</h4>\n<p><strong>功能描述：</strong></p>\n<ul>\n<li>两个容器元素合并，并存储到另一容器中</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li>\n<p><code>merge(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest);  </code></p>\n<p>// 容器元素合并，并存储到另一容器中</p>\n<p>// 注意：两个容器必须是<strong>有序的</strong></p>\n<p>//beg1   容器 1 开始迭代器<br>\n //end1   容器 1 结束迭代器<br>\n //beg2   容器 2 开始迭代器<br>\n //end2   容器 2 结束迭代器<br>\n //dest    目标容器开始迭代器</p>\n</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-c++\">#include &lt;algorithm&gt;\n#include &lt;vector&gt;\n\nclass myPrint\n&#123;\npublic:\n\tvoid operator()(int val)\n\t&#123;\n\t\tcout &lt;&lt; val &lt;&lt; &quot; &quot;;\n\t&#125;\n&#125;;\n\nvoid test01()\n&#123;\n\tvector&lt;int&gt; v1;\n\tvector&lt;int&gt; v2;\n\tfor (int i = 0; i &lt; 10 ; i++) \n    &#123;\n\t\tv1.push_back(i);\n\t\tv2.push_back(i + 1);\n\t&#125;\n\n\tvector&lt;int&gt; vtarget;\n\t//目标容器需要提前开辟空间\n\tvtarget.resize(v1.size() + v2.size());\n\t//合并  需要两个有序序列\n\tmerge(v1.begin(), v1.end(), v2.begin(), v2.end(), vtarget.begin());\n\tfor_each(vtarget.begin(), vtarget.end(), myPrint());\n\tcout &lt;&lt; endl;\n&#125;\n\nint main() &#123;\n\n\ttest01();\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<p>** 总结：**merge 合并的两个容器必须的有序序列</p>\n<h4 id=\"34-reverse\"><a class=\"markdownIt-Anchor\" href=\"#34-reverse\">#</a> 3.4 reverse</h4>\n<p><strong>功能描述：</strong></p>\n<ul>\n<li>将容器内元素进行反转</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li>\n<p><code>reverse(iterator beg, iterator end);  </code></p>\n<p>// 反转指定范围的元素</p>\n<p>//beg 开始迭代器</p>\n<p>//end 结束迭代器</p>\n</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-c++\">#include &lt;algorithm&gt;\n#include &lt;vector&gt;\n\nclass myPrint\n&#123;\npublic:\n\tvoid operator()(int val)\n\t&#123;\n\t\tcout &lt;&lt; val &lt;&lt; &quot; &quot;;\n\t&#125;\n&#125;;\n\nvoid test01()\n&#123;\n\tvector&lt;int&gt; v;\n\tv.push_back(10);\n\tv.push_back(30);\n\tv.push_back(50);\n\tv.push_back(20);\n\tv.push_back(40);\n\n\tcout &lt;&lt; &quot;反转前： &quot; &lt;&lt; endl;\n\tfor_each(v.begin(), v.end(), myPrint());\n\tcout &lt;&lt; endl;\n\n\tcout &lt;&lt; &quot;反转后： &quot; &lt;&lt; endl;\n\n\treverse(v.begin(), v.end());\n\tfor_each(v.begin(), v.end(), myPrint());\n\tcout &lt;&lt; endl;\n&#125;\n\nint main() &#123;\n\n\ttest01();\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<p>** 总结：**reverse 反转区间内元素，面试题可能涉及到</p>\n<h3 id=\"4-常用拷贝和替换算法\"><a class=\"markdownIt-Anchor\" href=\"#4-常用拷贝和替换算法\">#</a> 4 常用拷贝和替换算法</h3>\n<p><strong>学习目标：</strong></p>\n<ul>\n<li>掌握常用的拷贝和替换算法</li>\n</ul>\n<p><strong>算法简介：</strong></p>\n<ul>\n<li><code>copy</code>                       // 容器内指定范围的元素拷贝到另一容器中</li>\n<li><code>replace</code>                 // 将容器内指定范围的旧元素修改为新元素</li>\n<li><code>replace_if </code>           // 容器内指定范围满足条件的元素替换为新元素</li>\n<li><code>swap</code>                      // 互换两个容器的元素</li>\n</ul>\n<h4 id=\"41-copy\"><a class=\"markdownIt-Anchor\" href=\"#41-copy\">#</a> 4.1 copy</h4>\n<p><strong>功能描述：</strong></p>\n<ul>\n<li>容器内指定范围的元素拷贝到另一容器中</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li>\n<p><code>copy(iterator beg, iterator end, iterator dest);  </code></p>\n<p>// 按值查找元素，找到返回指定位置迭代器，找不到返回结束迭代器位置</p>\n<p>//beg  开始迭代器</p>\n<p>//end  结束迭代器</p>\n<p>//dest 目标起始迭代器</p>\n</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-c++\">#include &lt;algorithm&gt;\n#include &lt;vector&gt;\n\nclass myPrint\n&#123;\npublic:\n\tvoid operator()(int val)\n\t&#123;\n\t\tcout &lt;&lt; val &lt;&lt; &quot; &quot;;\n\t&#125;\n&#125;;\n\nvoid test01()\n&#123;\n\tvector&lt;int&gt; v1;\n\tfor (int i = 0; i &lt; 10; i++) &#123;\n\t\tv1.push_back(i + 1);\n\t&#125;\n\tvector&lt;int&gt; v2;\n\tv2.resize(v1.size());\n\tcopy(v1.begin(), v1.end(), v2.begin());\n\n\tfor_each(v2.begin(), v2.end(), myPrint());\n\tcout &lt;&lt; endl;\n&#125;\n\nint main() &#123;\n\n\ttest01();\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<p>** 总结：** 利用 copy 算法在拷贝时，目标容器记得提前开辟空间</p>\n<h4 id=\"42-replace\"><a class=\"markdownIt-Anchor\" href=\"#42-replace\">#</a> 4.2 replace</h4>\n<p><strong>功能描述：</strong></p>\n<ul>\n<li>将容器内指定范围的旧元素修改为新元素</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li>\n<p><code>replace(iterator beg, iterator end, oldvalue, newvalue);  </code></p>\n<p>// 将区间内旧元素 替换成 新元素</p>\n<p>//beg 开始迭代器</p>\n<p>//end 结束迭代器</p>\n<p>//oldvalue 旧元素</p>\n<p>//newvalue 新元素</p>\n</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-c++\">#include &lt;algorithm&gt;\n#include &lt;vector&gt;\n\nclass myPrint\n&#123;\npublic:\n\tvoid operator()(int val)\n\t&#123;\n\t\tcout &lt;&lt; val &lt;&lt; &quot; &quot;;\n\t&#125;\n&#125;;\n\nvoid test01()\n&#123;\n\tvector&lt;int&gt; v;\n\tv.push_back(20);\n\tv.push_back(30);\n\tv.push_back(20);\n\tv.push_back(40);\n\tv.push_back(50);\n\tv.push_back(10);\n\tv.push_back(20);\n\n\tcout &lt;&lt; &quot;替换前：&quot; &lt;&lt; endl;\n\tfor_each(v.begin(), v.end(), myPrint());\n\tcout &lt;&lt; endl;\n\n\t//将容器中的20 替换成 2000\n\tcout &lt;&lt; &quot;替换后：&quot; &lt;&lt; endl;\n\treplace(v.begin(), v.end(), 20,2000);\n\tfor_each(v.begin(), v.end(), myPrint());\n\tcout &lt;&lt; endl;\n&#125;\n\nint main() &#123;\n\n\ttest01();\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<p>** 总结：**replace 会替换区间内满足条件的元素</p>\n<h4 id=\"43-replace_if\"><a class=\"markdownIt-Anchor\" href=\"#43-replace_if\">#</a> 4.3 replace_if</h4>\n<p><strong>功能描述:</strong></p>\n<ul>\n<li>将区间内满足条件的元素，替换成指定元素</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li>\n<p><code>replace_if(iterator beg, iterator end, _pred, newvalue);  </code></p>\n<p>// 按条件替换元素，满足条件的替换成指定元素</p>\n<p>//beg 开始迭代器</p>\n<p>//end 结束迭代器</p>\n<p>//_pred 谓词</p>\n<p>//newvalue 替换的新元素</p>\n</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-c++\">#include &lt;algorithm&gt;\n#include &lt;vector&gt;\n\nclass myPrint\n&#123;\npublic:\n\tvoid operator()(int val)\n\t&#123;\n\t\tcout &lt;&lt; val &lt;&lt; &quot; &quot;;\n\t&#125;\n&#125;;\n\nclass ReplaceGreater30\n&#123;\npublic:\n\tbool operator()(int val)\n\t&#123;\n\t\treturn val &gt;= 30;\n\t&#125;\n\n&#125;;\n\nvoid test01()\n&#123;\n\tvector&lt;int&gt; v;\n\tv.push_back(20);\n\tv.push_back(30);\n\tv.push_back(20);\n\tv.push_back(40);\n\tv.push_back(50);\n\tv.push_back(10);\n\tv.push_back(20);\n\n\tcout &lt;&lt; &quot;替换前：&quot; &lt;&lt; endl;\n\tfor_each(v.begin(), v.end(), myPrint());\n\tcout &lt;&lt; endl;\n\n\t//将容器中大于等于的30 替换成 3000\n\tcout &lt;&lt; &quot;替换后：&quot; &lt;&lt; endl;\n\treplace_if(v.begin(), v.end(), ReplaceGreater30(), 3000);\n\tfor_each(v.begin(), v.end(), myPrint());\n\tcout &lt;&lt; endl;\n&#125;\n\nint main() &#123;\n\n\ttest01();\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<p>** 总结：**replace_if 按条件查找，可以利用仿函数灵活筛选满足的条件</p>\n<h4 id=\"44-swap\"><a class=\"markdownIt-Anchor\" href=\"#44-swap\">#</a> 4.4 swap</h4>\n<p><strong>功能描述：</strong></p>\n<ul>\n<li>互换两个容器的元素</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li>\n<p><code>swap(container c1, container c2);  </code></p>\n<p>// 互换两个容器的元素</p>\n<p>//c1 容器 1</p>\n<p>//c2 容器 2</p>\n</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-c++\">#include &lt;algorithm&gt;\n#include &lt;vector&gt;\n\nclass myPrint\n&#123;\npublic:\n\tvoid operator()(int val)\n\t&#123;\n\t\tcout &lt;&lt; val &lt;&lt; &quot; &quot;;\n\t&#125;\n&#125;;\n\nvoid test01()\n&#123;\n\tvector&lt;int&gt; v1;\n\tvector&lt;int&gt; v2;\n\tfor (int i = 0; i &lt; 10; i++) &#123;\n\t\tv1.push_back(i);\n\t\tv2.push_back(i+100);\n\t&#125;\n\n\tcout &lt;&lt; &quot;交换前： &quot; &lt;&lt; endl;\n\tfor_each(v1.begin(), v1.end(), myPrint());\n\tcout &lt;&lt; endl;\n\tfor_each(v2.begin(), v2.end(), myPrint());\n\tcout &lt;&lt; endl;\n\n\tcout &lt;&lt; &quot;交换后： &quot; &lt;&lt; endl;\n\tswap(v1, v2);\n\tfor_each(v1.begin(), v1.end(), myPrint());\n\tcout &lt;&lt; endl;\n\tfor_each(v2.begin(), v2.end(), myPrint());\n\tcout &lt;&lt; endl;\n&#125;\n\nint main() &#123;\n\n\ttest01();\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<p>** 总结：**swap 交换容器时，注意交换的容器要同种类型</p>\n<h3 id=\"5-常用算术生成算法\"><a class=\"markdownIt-Anchor\" href=\"#5-常用算术生成算法\">#</a> 5 常用算术生成算法</h3>\n<p><strong>学习目标：</strong></p>\n<ul>\n<li>掌握常用的算术生成算法</li>\n</ul>\n<p><strong>注意：</strong></p>\n<ul>\n<li>算术生成算法属于小型算法，使用时包含的头文件为  <code>#include &lt;numeric&gt;</code></li>\n</ul>\n<p><strong>算法简介：</strong></p>\n<ul>\n<li>\n<p><code>accumulate</code>       // 计算容器元素累计总和</p>\n</li>\n<li>\n<p><code>fill</code>                  // 向容器中添加元素</p>\n</li>\n</ul>\n<h4 id=\"51-accumulate\"><a class=\"markdownIt-Anchor\" href=\"#51-accumulate\">#</a> 5.1 accumulate</h4>\n<p><strong>功能描述：</strong></p>\n<ul>\n<li>计算区间内 容器元素累计总和</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li>\n<p><code>accumulate(iterator beg, iterator end, value);  </code></p>\n<p>// 计算容器元素累计总和</p>\n<p>//beg 开始迭代器</p>\n<p>//end 结束迭代器</p>\n<p>//value 起始值</p>\n</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-c++\">#include &lt;numeric&gt;\n#include &lt;vector&gt;\nvoid test01()\n&#123;\n\tvector&lt;int&gt; v;\n\tfor (int i = 0; i &lt;= 100; i++) &#123;\n\t\tv.push_back(i);\n\t&#125;\n\n\tint total = accumulate(v.begin(), v.end(), 0);\n\n\tcout &lt;&lt; &quot;total = &quot; &lt;&lt; total &lt;&lt; endl;\n&#125;\n\nint main() &#123;\n\n\ttest01();\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<p>** 总结：**accumulate 使用时头文件注意是 numeric，这个算法很实用</p>\n<h4 id=\"52-fill\"><a class=\"markdownIt-Anchor\" href=\"#52-fill\">#</a> 5.2 fill</h4>\n<p><strong>功能描述：</strong></p>\n<ul>\n<li>向容器中填充指定的元素</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li>\n<p><code>fill(iterator beg, iterator end, value);  </code></p>\n<p>// 向容器中填充元素</p>\n<p>//beg 开始迭代器</p>\n<p>//end 结束迭代器</p>\n<p>//value 填充的值</p>\n</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-c++\">#include &lt;numeric&gt;\n#include &lt;vector&gt;\n#include &lt;algorithm&gt;\n\nclass myPrint\n&#123;\npublic:\n\tvoid operator()(int val)\n\t&#123;\n\t\tcout &lt;&lt; val &lt;&lt; &quot; &quot;;\n\t&#125;\n&#125;;\n\nvoid test01()\n&#123;\n\n\tvector&lt;int&gt; v;\n\tv.resize(10);\n\t//填充\n\tfill(v.begin(), v.end(), 100);\n\n\tfor_each(v.begin(), v.end(), myPrint());\n\tcout &lt;&lt; endl;\n&#125;\n\nint main() &#123;\n\n\ttest01();\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<p>** 总结：** 利用 fill 可以将容器区间内元素填充为 指定的值</p>\n<h3 id=\"6-常用集合算法\"><a class=\"markdownIt-Anchor\" href=\"#6-常用集合算法\">#</a> 6 常用集合算法</h3>\n<p><strong>学习目标：</strong></p>\n<ul>\n<li>掌握常用的集合算法</li>\n</ul>\n<p><strong>算法简介：</strong></p>\n<ul>\n<li>\n<p><code>set_intersection</code>           // 求两个容器的交集</p>\n</li>\n<li>\n<p><code>set_union</code>                        // 求两个容器的并集</p>\n</li>\n<li>\n<p><code>set_difference </code>               // 求两个容器的差集</p>\n</li>\n</ul>\n<h4 id=\"61-set_intersection\"><a class=\"markdownIt-Anchor\" href=\"#61-set_intersection\">#</a> 6.1 set_intersection</h4>\n<p><strong>功能描述：</strong></p>\n<ul>\n<li>求两个容器的交集</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li>\n<p><code>set_intersection(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest);  </code></p>\n<p>// 求两个集合的交集</p>\n<p>// <strong>注意：两个集合必须是有序序列</strong></p>\n<p>//beg1 容器 1 开始迭代器<br>\n //end1 容器 1 结束迭代器<br>\n //beg2 容器 2 开始迭代器<br>\n //end2 容器 2 结束迭代器<br>\n //dest 目标容器开始迭代器</p>\n</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">#include &lt;vector&gt;\n#include &lt;algorithm&gt;\n\nclass myPrint\n&#123;\npublic:\n\tvoid operator()(int val)\n\t&#123;\n\t\tcout &lt;&lt; val &lt;&lt; &quot; &quot;;\n\t&#125;\n&#125;;\n\nvoid test01()\n&#123;\n\tvector&lt;int&gt; v1;\n\tvector&lt;int&gt; v2;\n\tfor (int i = 0; i &lt; 10; i++)\n    &#123;\n\t\tv1.push_back(i);\n\t\tv2.push_back(i+5);\n\t&#125;\n\n\tvector&lt;int&gt; vTarget;\n\t//取两个里面较小的值给目标容器开辟空间\n\tvTarget.resize(min(v1.size(), v2.size()));\n\n\t//返回目标容器的最后一个元素的迭代器地址\n\tvector&lt;int&gt;::iterator itEnd = \n        set_intersection(v1.begin(), v1.end(), v2.begin(), v2.end(), vTarget.begin());\n\n\tfor_each(vTarget.begin(), itEnd, myPrint());\n\tcout &lt;&lt; endl;\n&#125;\n\nint main() &#123;\n\n\ttest01();\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<p><strong>总结：</strong></p>\n<ul>\n<li>求交集的两个集合必须的有序序列</li>\n<li>目标容器开辟空间需要从<strong>两个容器中取小值</strong></li>\n<li>set_intersection 返回值既是交集中最后一个元素的位置</li>\n</ul>\n<h4 id=\"62-set_union\"><a class=\"markdownIt-Anchor\" href=\"#62-set_union\">#</a> 6.2 set_union</h4>\n<p><strong>功能描述：</strong></p>\n<ul>\n<li>求两个集合的并集</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li>\n<p><code>set_union(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest);  </code></p>\n<p>// 求两个集合的并集</p>\n<p>// <strong>注意：两个集合必须是有序序列</strong></p>\n<p>//beg1 容器 1 开始迭代器<br>\n //end1 容器 1 结束迭代器<br>\n //beg2 容器 2 开始迭代器<br>\n //end2 容器 2 结束迭代器<br>\n //dest 目标容器开始迭代器</p>\n</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">#include &lt;vector&gt;\n#include &lt;algorithm&gt;\n\nclass myPrint\n&#123;\npublic:\n\tvoid operator()(int val)\n\t&#123;\n\t\tcout &lt;&lt; val &lt;&lt; &quot; &quot;;\n\t&#125;\n&#125;;\n\nvoid test01()\n&#123;\n\tvector&lt;int&gt; v1;\n\tvector&lt;int&gt; v2;\n\tfor (int i = 0; i &lt; 10; i++) &#123;\n\t\tv1.push_back(i);\n\t\tv2.push_back(i+5);\n\t&#125;\n\n\tvector&lt;int&gt; vTarget;\n\t//取两个容器的和给目标容器开辟空间\n\tvTarget.resize(v1.size() + v2.size());\n\n\t//返回目标容器的最后一个元素的迭代器地址\n\tvector&lt;int&gt;::iterator itEnd = \n        set_union(v1.begin(), v1.end(), v2.begin(), v2.end(), vTarget.begin());\n\n\tfor_each(vTarget.begin(), itEnd, myPrint());\n\tcout &lt;&lt; endl;\n&#125;\n\nint main() &#123;\n\n\ttest01();\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<p><strong>总结：</strong></p>\n<ul>\n<li>求并集的两个集合必须的有序序列</li>\n<li>目标容器开辟空间需要<strong>两个容器相加</strong></li>\n<li>set_union 返回值既是并集中最后一个元素的位置</li>\n</ul>\n<h4 id=\"63-set_difference\"><a class=\"markdownIt-Anchor\" href=\"#63-set_difference\">#</a> 6.3  set_difference</h4>\n<p><strong>功能描述：</strong></p>\n<ul>\n<li>求两个集合的差集</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li>\n<p><code>set_difference(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest);  </code></p>\n<p>// 求两个集合的差集</p>\n<p>// <strong>注意：两个集合必须是有序序列</strong></p>\n<p>//beg1 容器 1 开始迭代器<br>\n //end1 容器 1 结束迭代器<br>\n //beg2 容器 2 开始迭代器<br>\n //end2 容器 2 结束迭代器<br>\n //dest 目标容器开始迭代器</p>\n</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">#include &lt;vector&gt;\n#include &lt;algorithm&gt;\n\nclass myPrint\n&#123;\npublic:\n\tvoid operator()(int val)\n\t&#123;\n\t\tcout &lt;&lt; val &lt;&lt; &quot; &quot;;\n\t&#125;\n&#125;;\n\nvoid test01()\n&#123;\n\tvector&lt;int&gt; v1;\n\tvector&lt;int&gt; v2;\n\tfor (int i = 0; i &lt; 10; i++) &#123;\n\t\tv1.push_back(i);\n\t\tv2.push_back(i+5);\n\t&#125;\n\n\tvector&lt;int&gt; vTarget;\n\t//取两个里面较大的值给目标容器开辟空间\n\tvTarget.resize( max(v1.size() , v2.size()));\n\n\t//返回目标容器的最后一个元素的迭代器地址\n\tcout &lt;&lt; &quot;v1与v2的差集为： &quot; &lt;&lt; endl;\n\tvector&lt;int&gt;::iterator itEnd = \n        set_difference(v1.begin(), v1.end(), v2.begin(), v2.end(), vTarget.begin());\n\tfor_each(vTarget.begin(), itEnd, myPrint());\n\tcout &lt;&lt; endl;\n\n\n\tcout &lt;&lt; &quot;v2与v1的差集为： &quot; &lt;&lt; endl;\n\titEnd = set_difference(v2.begin(), v2.end(), v1.begin(), v1.end(), vTarget.begin());\n\tfor_each(vTarget.begin(), itEnd, myPrint());\n\tcout &lt;&lt; endl;\n&#125;\n\nint main() &#123;\n\n\ttest01();\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<p><strong>总结：</strong></p>\n<ul>\n<li>求差集的两个集合必须的有序序列</li>\n<li>目标容器开辟空间需要从<strong>两个容器取较大值</strong></li>\n<li>set_difference 返回值既是差集中最后一个元素的位置</li>\n</ul>\n",
            "tags": []
        },
        {
            "id": "https://empireofyt.github.io/computer-science/cpp/heima/c++%E6%8F%90%E9%AB%98--STL%E5%B8%B8%E8%A7%81%E5%AE%B9%E5%99%A8/",
            "url": "https://empireofyt.github.io/computer-science/cpp/heima/c++%E6%8F%90%E9%AB%98--STL%E5%B8%B8%E8%A7%81%E5%AE%B9%E5%99%A8/",
            "title": "c++提高--STL常见容器",
            "date_published": "2023-02-02T13:06:37.356Z",
            "content_html": "<h1 id=\"stl-常见容器\"><a class=\"markdownIt-Anchor\" href=\"#stl-常见容器\">#</a> STL 常见容器</h1>\n<h2 id=\"一-string容器\"><a class=\"markdownIt-Anchor\" href=\"#一-string容器\">#</a> 一 string 容器</h2>\n<h2 id=\"二-vector容器\"><a class=\"markdownIt-Anchor\" href=\"#二-vector容器\">#</a> 二 vector 容器</h2>\n<h2 id=\"三-deque容器\"><a class=\"markdownIt-Anchor\" href=\"#三-deque容器\">#</a> 三 deque 容器</h2>\n<h2 id=\"四-stack容器\"><a class=\"markdownIt-Anchor\" href=\"#四-stack容器\">#</a> 四 stack 容器</h2>\n<h2 id=\"五-queue容器\"><a class=\"markdownIt-Anchor\" href=\"#五-queue容器\">#</a> 五 queue 容器</h2>\n<h2 id=\"六-list容器\"><a class=\"markdownIt-Anchor\" href=\"#六-list容器\">#</a> 六 list 容器</h2>\n<h2 id=\"七-setmultiset-容器\"><a class=\"markdownIt-Anchor\" href=\"#七-setmultiset-容器\">#</a> 七 set/multiset 容器</h2>\n<h2 id=\"八-map和multimap容器\"><a class=\"markdownIt-Anchor\" href=\"#八-map和multimap容器\">#</a> 八 map 和 multimap 容器</h2>\n<h2 id=\"九-案例员工分组\"><a class=\"markdownIt-Anchor\" href=\"#九-案例员工分组\">#</a> 九 案例–员工分组</h2>\n",
            "tags": []
        },
        {
            "id": "https://empireofyt.github.io/computer-science/cpp/heima/c++%E6%8F%90%E9%AB%98--STL%E5%88%9D%E8%AF%86/",
            "url": "https://empireofyt.github.io/computer-science/cpp/heima/c++%E6%8F%90%E9%AB%98--STL%E5%88%9D%E8%AF%86/",
            "title": "c++提高--STL初识",
            "date_published": "2023-02-02T13:05:58.003Z",
            "content_html": "<h1 id=\"stl初识\"><a class=\"markdownIt-Anchor\" href=\"#stl初识\">#</a> STL 初识</h1>\n<h3 id=\"一-stl的诞生\"><a class=\"markdownIt-Anchor\" href=\"#一-stl的诞生\">#</a> 一 STL 的诞生</h3>\n<ul>\n<li>\n<p>长久以来，软件界一直希望建立一种可重复利用的东西</p>\n</li>\n<li>\n<p>C++ 的<strong>面向对象</strong>和<strong>泛型编程</strong>思想，目的就是<strong>复用性的提升</strong></p>\n</li>\n<li>\n<p>大多情况下，数据结构和算法都未能有一套标准，导致被迫从事大量重复工作</p>\n</li>\n<li>\n<p>为了建立数据结构和算法的一套标准，诞生了<strong> STL</strong></p>\n</li>\n</ul>\n<h3 id=\"二-stl基本概念\"><a class=\"markdownIt-Anchor\" href=\"#二-stl基本概念\">#</a> 二 STL 基本概念</h3>\n<ul>\n<li>STL(Standard Template Library,<strong> 标准模板库</strong>)</li>\n<li>STL 从广义上分为: <strong>容器 (container) 算法 (algorithm) 迭代器 (iterator)</strong></li>\n<li><strong>容器</strong>和<strong>算法</strong>之间通过<strong>迭代器</strong>进行无缝连接。</li>\n<li>STL 几乎所有的代码都采用了模板类或者模板函数</li>\n</ul>\n<h3 id=\"三-stl六大组件\"><a class=\"markdownIt-Anchor\" href=\"#三-stl六大组件\">#</a> 三 STL 六大组件</h3>\n<p>STL 大体分为六大组件，分别是:<strong> 容器、算法、迭代器、仿函数、适配器（配接器）、空间配置器</strong></p>\n<ol>\n<li>容器：各种数据结构，如 vector、list、deque、set、map 等，用来存放数据。</li>\n<li>算法：各种常用的算法，如 sort、find、copy、for_each 等</li>\n<li>迭代器：扮演了容器与算法之间的胶合剂。</li>\n<li>仿函数：行为类似函数，可作为算法的某种策略。</li>\n<li>适配器：一种用来修饰容器或者仿函数或迭代器接口的东西。</li>\n<li>空间配置器：负责空间的配置与管理。</li>\n</ol>\n<h3 id=\"四-stl中容器-算法-迭代器\"><a class=\"markdownIt-Anchor\" href=\"#四-stl中容器-算法-迭代器\">#</a> 四 STL 中容器、算法、迭代器</h3>\n<p>** 容器：** 置物之所也</p>\n<p>STL<strong> 容器</strong>就是将运用<strong>最广泛的一些数据结构</strong>实现出来</p>\n<p>常用的数据结构：数组，链表，树，栈，队列，集合，映射表 等</p>\n<p>这些容器分为<strong>序列式容器</strong>和<strong>关联式容器</strong>两种:</p>\n<p>​\t<strong>序列式容器</strong>：强调值的排序，序列式容器中的每个元素均有固定的位置。<br>\n​\t<strong>关联式容器</strong>：二叉树结构，各元素之间没有严格的物理上的顺序关系</p>\n<p>** 算法：** 问题之解法也</p>\n<p>有限的步骤，解决逻辑或数学上的问题，这一门学科我们叫做算法 (Algorithms)</p>\n<p>算法分为:<strong> 质变算法</strong>和<strong>非质变算法</strong>。</p>\n<p>质变算法：是指运算过程中会更改区间内的元素的内容。例如拷贝，替换，删除等等</p>\n<p>非质变算法：是指运算过程中不会更改区间内的元素内容，例如查找、计数、遍历、寻找极值等等</p>\n<p>** 迭代器：** 容器和算法之间粘合剂</p>\n<p>提供一种方法，使之能够依序寻访某个容器所含的各个元素，而又无需暴露该容器的内部表示方式。</p>\n<p>每个容器都有自己专属的迭代器</p>\n<p>迭代器使用非常类似于指针，初学阶段我们可以先理解迭代器为指针</p>\n<p>迭代器种类：</p>\n<table>\n<thead>\n<tr>\n<th>种类</th>\n<th>功能</th>\n<th>支持运算</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>输入迭代器</td>\n<td>对数据的只读访问</td>\n<td>只读，支持 ++、==、！=</td>\n</tr>\n<tr>\n<td>输出迭代器</td>\n<td>对数据的只写访问</td>\n<td>只写，支持 ++</td>\n</tr>\n<tr>\n<td>前向迭代器</td>\n<td>读写操作，并能向前推进迭代器</td>\n<td>读写，支持 ++、==、！=</td>\n</tr>\n<tr>\n<td>双向迭代器</td>\n<td>读写操作，并能向前和向后操作</td>\n<td>读写，支持 ++、–，</td>\n</tr>\n<tr>\n<td>随机访问迭代器</td>\n<td>读写操作，可以以跳跃的方式访问任意数据，功能最强的迭代器</td>\n<td>读写，支持 ++、–、[n]、-n、&lt;、&lt;=、&gt;、&gt;=</td>\n</tr>\n</tbody>\n</table>\n<p>常用的容器中迭代器种类为双向迭代器，和随机访问迭代器</p>\n<h3 id=\"五-容器算法迭代器初识\"><a class=\"markdownIt-Anchor\" href=\"#五-容器算法迭代器初识\">#</a> 五 容器算法迭代器初识</h3>\n<p>了解 STL 中容器、算法、迭代器概念之后，我们利用代码感受 STL 的魅力</p>\n<p>STL 中最常用的容器为 Vector，可以理解为数组，下面我们将学习如何向这个容器中插入数据、并遍历这个容器</p>\n<h4 id=\"51-vector存放内置数据类型\"><a class=\"markdownIt-Anchor\" href=\"#51-vector存放内置数据类型\">#</a> 5.1 vector 存放内置数据类型</h4>\n<p>容器：      <code>vector</code></p>\n<p>算法：      <code>for_each</code></p>\n<p>迭代器：  <code>vector&lt;int&gt;::iterator</code></p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">#include &lt;vector&gt;\n#include &lt;algorithm&gt;\n\nvoid MyPrint(int val)\n&#123;\n\tcout &lt;&lt; val &lt;&lt; endl;\n&#125;\n\nvoid test01() &#123;\n\n\t//创建vector容器对象，并且通过模板参数指定容器中存放的数据的类型\n\tvector&lt;int&gt; v;\n\t//向容器中放数据\n\tv.push_back(10);\n\tv.push_back(20);\n\tv.push_back(30);\n\tv.push_back(40);\n\n\t//每一个容器都有自己的迭代器，迭代器是用来遍历容器中的元素\n\t//v.begin()返回迭代器，这个迭代器指向容器中第一个数据\n\t//v.end()返回迭代器，这个迭代器指向容器元素的最后一个元素的下一个位置\n\t//vector&lt;int&gt;::iterator 拿到vector&lt;int&gt;这种容器的迭代器类型\n\n\tvector&lt;int&gt;::iterator pBegin = v.begin();\n\tvector&lt;int&gt;::iterator pEnd = v.end();\n\n\t//第一种遍历方式：\n\twhile (pBegin != pEnd) &#123;\n\t\tcout &lt;&lt; *pBegin &lt;&lt; endl;\n\t\tpBegin++;\n\t&#125;\n\n\t\n\t//第二种遍历方式：\n\tfor (vector&lt;int&gt;::iterator it = v.begin(); it != v.end(); it++) &#123;\n\t\tcout &lt;&lt; *it &lt;&lt; endl;\n\t&#125;\n\tcout &lt;&lt; endl;\n\n\t//第三种遍历方式：\n\t//使用STL提供标准遍历算法  头文件 algorithm\n\tfor_each(v.begin(), v.end(), MyPrint);\n&#125;\n\nint main() &#123;\n\n\ttest01();\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<h4 id=\"52-vector存放自定义数据类型\"><a class=\"markdownIt-Anchor\" href=\"#52-vector存放自定义数据类型\">#</a> 5.2 Vector 存放自定义数据类型</h4>\n<p>学习目标：vector 中存放自定义数据类型，并打印输出</p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-c++\">#include &lt;vector&gt;\n#include &lt;string&gt;\n\n//自定义数据类型\nclass Person &#123;\npublic:\n\tPerson(string name, int age) &#123;\n\t\tmName = name;\n\t\tmAge = age;\n\t&#125;\npublic:\n\tstring mName;\n\tint mAge;\n&#125;;\n//存放对象\nvoid test01() &#123;\n\n\tvector&lt;Person&gt; v;\n\n\t//创建数据\n\tPerson p1(&quot;aaa&quot;, 10);\n\tPerson p2(&quot;bbb&quot;, 20);\n\tPerson p3(&quot;ccc&quot;, 30);\n\tPerson p4(&quot;ddd&quot;, 40);\n\tPerson p5(&quot;eee&quot;, 50);\n\n\tv.push_back(p1);\n\tv.push_back(p2);\n\tv.push_back(p3);\n\tv.push_back(p4);\n\tv.push_back(p5);\n\n\tfor (vector&lt;Person&gt;::iterator it = v.begin(); it != v.end(); it++) &#123;\n\t\tcout &lt;&lt; &quot;Name:&quot; &lt;&lt; (*it).mName &lt;&lt; &quot; Age:&quot; &lt;&lt; (*it).mAge &lt;&lt; endl;\n\n\t&#125;\n&#125;\n\n\n//放对象指针\nvoid test02() &#123;\n\n\tvector&lt;Person*&gt; v;\n\n\t//创建数据\n\tPerson p1(&quot;aaa&quot;, 10);\n\tPerson p2(&quot;bbb&quot;, 20);\n\tPerson p3(&quot;ccc&quot;, 30);\n\tPerson p4(&quot;ddd&quot;, 40);\n\tPerson p5(&quot;eee&quot;, 50);\n\n\tv.push_back(&amp;p1);\n\tv.push_back(&amp;p2);\n\tv.push_back(&amp;p3);\n\tv.push_back(&amp;p4);\n\tv.push_back(&amp;p5);\n\n\tfor (vector&lt;Person*&gt;::iterator it = v.begin(); it != v.end(); it++) &#123;\n\t\tPerson * p = (*it);\n\t\tcout &lt;&lt; &quot;Name:&quot; &lt;&lt; p-&gt;mName &lt;&lt; &quot; Age:&quot; &lt;&lt; (*it)-&gt;mAge &lt;&lt; endl;\n\t&#125;\n&#125;\n\n\nint main() &#123;\n\n\ttest01();\n    \n\ttest02();\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<h4 id=\"53-vector容器嵌套容器\"><a class=\"markdownIt-Anchor\" href=\"#53-vector容器嵌套容器\">#</a> 5.3 Vector 容器嵌套容器</h4>\n<p>学习目标：容器中嵌套容器，我们将所有数据进行遍历输出</p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">#include &lt;vector&gt;\n\n//容器嵌套容器\nvoid test01() &#123;\n\n\tvector&lt; vector&lt;int&gt; &gt;  v;\n\n\tvector&lt;int&gt; v1;\n\tvector&lt;int&gt; v2;\n\tvector&lt;int&gt; v3;\n\tvector&lt;int&gt; v4;\n\n\tfor (int i = 0; i &lt; 4; i++) &#123;\n\t\tv1.push_back(i + 1);\n\t\tv2.push_back(i + 2);\n\t\tv3.push_back(i + 3);\n\t\tv4.push_back(i + 4);\n\t&#125;\n\n\t//将容器元素插入到vector v中\n\tv.push_back(v1);\n\tv.push_back(v2);\n\tv.push_back(v3);\n\tv.push_back(v4);\n\n\n\tfor (vector&lt;vector&lt;int&gt;&gt;::iterator it = v.begin(); it != v.end(); it++) &#123;\n\n\t\tfor (vector&lt;int&gt;::iterator vit = (*it).begin(); vit != (*it).end(); vit++) &#123;\n\t\t\tcout &lt;&lt; *vit &lt;&lt; &quot; &quot;;\n\t\t&#125;\n\t\tcout &lt;&lt; endl;\n\t&#125;\n\n&#125;\n\nint main() &#123;\n\n\ttest01();\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "https://empireofyt.github.io/computer-science/cpp/heima/c++%E6%8F%90%E9%AB%98--%E6%A8%A1%E6%9D%BF/",
            "url": "https://empireofyt.github.io/computer-science/cpp/heima/c++%E6%8F%90%E9%AB%98--%E6%A8%A1%E6%9D%BF/",
            "title": "c++提高--模板",
            "date_published": "2023-02-02T12:59:15.720Z",
            "content_html": "<h1 id=\"模板\"><a class=\"markdownIt-Anchor\" href=\"#模板\">#</a> 模板</h1>\n<h2 id=\"一-模板的概念\"><a class=\"markdownIt-Anchor\" href=\"#一-模板的概念\">#</a> 一 模板的概念</h2>\n<p>含义：建立<strong>通用的模具</strong>，大大提高<strong>复用性</strong></p>\n<p>模板的特点：</p>\n<ul>\n<li>模板不可以直接使用，它只是一个框架</li>\n<li>模板的通用并不是万能的</li>\n</ul>\n<p>C++ 提供两种模板机制:<strong> 函数模板</strong>和<strong>类模板</strong></p>\n<p>C++ 另一种编程思想称为 <strong>泛型编程</strong> ，主要利用的技术就是模板</p>\n<h2 id=\"二函数模板\"><a class=\"markdownIt-Anchor\" href=\"#二函数模板\">#</a> 二函数模板</h2>\n<h3 id=\"21-函数模板基础\"><a class=\"markdownIt-Anchor\" href=\"#21-函数模板基础\">#</a> 2.1  函数模板基础</h3>\n<p>函数模板<strong>作用</strong>：建立一个通用函数，其函数返回值类型和形参类型可以不具体制定，用一个<strong>虚拟的类型</strong>来代表。</p>\n<p><strong>语法</strong>： <code>template&lt;typename T&gt;</code>       函数声明或定义</p>\n<p><strong>语法：</strong></p>\n<pre><code class=\"language-C++\">template&lt;typename T&gt;\n函数声明或定义\n</code></pre>\n<p><strong>解释：</strong></p>\n<p>template — 声明创建模板</p>\n<p>typename — 表面其后面的符号是一种数据类型，可以用 class 代替</p>\n<p>T — 通用的数据类型，名称可以替换，通常为大写字母</p>\n<pre><code class=\"language-//利用模板实现交换\">//1、**自动类型推导**\n//mySwap(a, b); \n\n//2、**显示指定类型**\nmySwap&lt;int&gt;(a, b);\n</code></pre>\n<p><strong>总结</strong>：</p>\n<ul>\n<li>函数模板利用关键字 template</li>\n<li>使用函数模板有两种方式：自动类型推导、显示指定类型</li>\n<li>模板的目的是为了提高复用性，将类型参数化</li>\n</ul>\n<h3 id=\"22-函数模板注意事项\"><a class=\"markdownIt-Anchor\" href=\"#22-函数模板注意事项\">#</a> 2.2 函数模板注意事项</h3>\n<p>注意事项：</p>\n<ul>\n<li>自动类型推导，必须推导出一致的数据类型 T, 才可以使用</li>\n<li>模板必须要确定出 T 的数据类型，才可以使用</li>\n</ul>\n<pre><code>//利用模板提供通用的交换函数\ntemplate&lt;class T&gt;\nvoid mySwap(T&amp; a, T&amp; b)\n&#123;\n\tT temp = a;\n\ta = b;\n\tb = temp;\n&#125;\n\n\n// 1、自动类型推导，必须推导出一致的数据类型T,才可以使用\nvoid test01()\n&#123;\n\tint a = 10;\n\tint b = 20;\n\tchar c = 'c';\n\n\tmySwap(a, b); // 正确，可以推导出一致的T\n\t//mySwap(a, c); // 错误，推导不出一致的T类型\n&#125;\n\n\n// 2、模板必须要确定出T的数据类型，才可以使用\ntemplate&lt;class T&gt;\nvoid func()\n&#123;\n\tcout &lt;&lt; &quot;func 调用&quot; &lt;&lt; endl;\n&#125;\n\nvoid test02()\n&#123;\n\t//func(); //错误，模板不能独立使用，必须确定出T的类型\n\tfunc&lt;int&gt;(); //利用显示指定类型的方式，给T一个类型，才可以使用该模板\n&#125;\n\nint main() &#123;\n\n\ttest01();\n\ttest02();\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<p>总结：</p>\n<ul>\n<li>使用模板时必须确定出通用数据类型 T，并且能够推导出一致的类型</li>\n</ul>\n<h3 id=\"23-普通函数和函数模板的区别\"><a class=\"markdownIt-Anchor\" href=\"#23-普通函数和函数模板的区别\">#</a> 2.3 普通函数和函数模板的区别</h3>\n<p><strong>普通函数与函数模板区别：</strong></p>\n<ul>\n<li>普通函数调用时可以发生自动类型转换（隐式类型转换）</li>\n<li>函数模板调用时，如果利用自动类型推导，不会发生隐式类型转换</li>\n<li>如果利用显示指定类型的方式，可以发生隐式类型转换</li>\n</ul>\n<pre><code class=\"language-C++\">int a = 10;int b = 20;\nchar c = 'c';\ncout &lt;&lt; myAdd01(a, c) &lt;&lt; endl; //正确，将char类型的'c'隐式转换为int类型  'c' 对应 ASCII码 99\n//myAdd02(a, c); // 报错，使用自动类型推导时，不会发生隐式类型转换\nmyAdd02&lt;int&gt;(a, c); //正确，如果用显示指定类型，可以发生隐式类型转换\n\n</code></pre>\n<p><strong>总结</strong>：建议使用显示指定类型的方式，调用函数模板，因为可以自己确定通用类型 T</p>\n<p><strong>调用规则</strong>如下：</p>\n<ul>\n<li>\n<p>如果函数模板和普通函数都可以实现，<strong>优先调用普通函数</strong></p>\n</li>\n<li>\n<p>可以通过<strong>空模板参数列表</strong>来强制调用函数模板</p>\n<p><code>//2、可以通过空模板参数列表来强制调用函数模板``  </code></p>\n<p><code>myPrint**&lt;&gt;**(a, b); //调用函数模板</code></p>\n</li>\n<li>\n<p>函数模板也可以发生重载</p>\n</li>\n<li>\n<p>如果函数模板可以产生更好的匹配，优先调用函数模板</p>\n</li>\n</ul>\n<h3 id=\"24-函数模板的局限性\"><a class=\"markdownIt-Anchor\" href=\"#24-函数模板的局限性\">#</a> 2.4 函数模板的局限性</h3>\n<p><strong>局限性</strong>：例如两个数组直接赋值，或者是一些自定义数据类型，都没法直接操作，这就是模板的局限性。</p>\n<p><strong>解决方案</strong>：为这些特定的类型提供<strong>具体化的模板</strong></p>\n<p><strong>具体化</strong>，显示具体化的原型和定意思以 **template&lt;&gt;** 开头，并通过名称来指出类型</p>\n<p>​\t\t <code>template&lt;&gt; bool myCompare(Person &amp;p1, Person &amp;p2)</code></p>\n<p>具体化优先于常规模板</p>\n<p><strong>总结：</strong></p>\n<ul>\n<li>利用具体化的模板，可以解决自定义类型的通用化</li>\n<li>学习模板并不是为了写模板，而是在 STL 能够运用系统提供的模板</li>\n</ul>\n<h2 id=\"三-类模板\"><a class=\"markdownIt-Anchor\" href=\"#三-类模板\">#</a> 三 类模板</h2>\n<h3 id=\"31-类模板基础\"><a class=\"markdownIt-Anchor\" href=\"#31-类模板基础\">#</a> 3.1 类模板基础</h3>\n<p>类模板<strong>作用</strong>：建立一个通用类，类中的成员 数据类型可以不具体制定，用一个<strong>虚拟的类型</strong>来代表。</p>\n<p><strong>语法</strong>：</p>\n<pre><code>template&lt;typename T&gt;    \n类\n</code></pre>\n<p><strong>解释：</strong></p>\n<p>template — 声明创建模板</p>\n<p>typename — 表面其后面的符号是一种数据类型，可以用 class 代替</p>\n<p>T — 通用的数据类型，名称可以替换，通常为大写字母</p>\n<h3 id=\"32-类模板和函数模型的区别\"><a class=\"markdownIt-Anchor\" href=\"#32-类模板和函数模型的区别\">#</a> 3.2 类模板和函数模型的区别</h3>\n<p>类模板与函数模板区别主要有两点：</p>\n<ol>\n<li>类模板没有自动类型推导的使用方式。只能使用<strong>显示指定类型方式</strong></li>\n<li>类模板在模板参数列表中可以有默认参数，函数模板不可以有</li>\n</ol>\n<pre><code>//类模板template&lt;class NameType, class AgeType = int&gt;\n//1、类模板没有自动类型推导的使用方式\nvoid test01()\n&#123;\n\t// Person p(&quot;孙悟空&quot;, 1000); // 错误 类模板使用时候，不可以用自动类型推导\n\tPerson &lt;string ,int&gt;p(&quot;孙悟空&quot;, 1000); //必须使用显示指定类型的方式，使用类模板\n\tp.showPerson();\n&#125;\n//2、类模板在模板参数列表中可以有默认参数\nvoid test02()\n&#123;\n\tPerson &lt;string&gt; p(&quot;猪八戒&quot;, 999); //类模板中的模板参数列表 可以指定默认参数\n\tp.showPerson();\n&#125;\n\n</code></pre>\n<h3 id=\"33-类模板的成员函数\"><a class=\"markdownIt-Anchor\" href=\"#33-类模板的成员函数\">#</a> 3.3 类模板的成员函数</h3>\n<p>类模板中成员函数和普通类中成员函数创建时机是有区别的：</p>\n<ul>\n<li><strong>普通类中的成员函数一开始</strong>就可以创建</li>\n<li><strong>类模板中的成员函数在调用时</strong>才创建</li>\n</ul>\n<pre><code>类模板成员函数类外实现，需要加上模板参数列表//构造函数 类外实现\ntemplate&lt;class T1, class T2&gt;\nPerson&lt;T1, T2&gt;::Person(T1 name, T2 age) &#123;\n\tthis-&gt;m_Name = name;\n\tthis-&gt;m_Age = age;\n&#125;\n//成员函数 类外实现\ntemplate&lt;class T1, class T2&gt;\n\tvoid Person&lt;T1, T2&gt;::showPerson() &#123;\n\tcout &lt;&lt; &quot;姓名: &quot; &lt;&lt; this-&gt;m_Name &lt;&lt; &quot; 年龄:&quot; &lt;&lt; this-&gt;m_Age &lt;&lt; endl;\n&#125;\n\n\n</code></pre>\n<h3 id=\"34-类模板对象做函数参数\"><a class=\"markdownIt-Anchor\" href=\"#34-类模板对象做函数参数\">#</a> 3.4 类模板对象做函数参数</h3>\n<p>学习目标：类模板实例化出的对象，向函数传参的方式<br>\n一共有三种传入方式：</p>\n<ol>\n<li>\n<p>指定传入的类型  — 直接显示对象的数据类型</p>\n<p>void printPerson1(Person&lt;string, int&gt; &amp;p)</p>\n</li>\n<li>\n<p>参数模板化      — 将对象中的参数变为模板进行传递</p>\n<p>template &lt;class T1, class T2&gt;void printPerson2(Person&lt;T1, T2&gt;&amp;p)</p>\n</li>\n<li>\n<p>整个类模板化    — 将这个对象类型 模板化进行传递</p>\n<p>template<class T>void printPerson3(T &amp; p)</p>\n</li>\n</ol>\n<p><strong>总结</strong>：通过类模板创建的对象，可以有三种方式向函数中进行传参使用比较广泛是第一种：指定传入的类型</p>\n<h3 id=\"35-类模板与继承\"><a class=\"markdownIt-Anchor\" href=\"#35-类模板与继承\">#</a> 3.5 类模板与继承</h3>\n<p>当类模板碰到继承时，需要注意一下几点：</p>\n<ul>\n<li>当子类继承的父类是一个类模板时，子类在声明的时候，要指定出父类中 T 的类型</li>\n<li>如果不指定，编译器无法给子类分配内存</li>\n<li>如果想灵活指定出父类中 T 的类型，子类也需变为类模板</li>\n</ul>\n<p><strong>总结</strong>：如果父类是类模板，子类需要指定出父类中 T 的数据类型</p>\n<h3 id=\"36-类模板份文件编写\"><a class=\"markdownIt-Anchor\" href=\"#36-类模板份文件编写\">#</a> 3.6 类模板份文件编写</h3>\n<p>学习目标：</p>\n<ul>\n<li>掌握类模板成员函数分文件编写产生的问题以及解决方式</li>\n</ul>\n<p>问题：</p>\n<ul>\n<li>类模板中成员函数创建时机是在调用阶段，导致分文件编写时链接不到</li>\n</ul>\n<p>解决：</p>\n<ul>\n<li>解决方式 1：直接包含.cpp 源文件</li>\n<li>解决方式 2：将声明和实现写到同一个文件中，并更改后缀名为.hpp，hpp 是约定的名称，并不是强制</li>\n</ul>\n<p><strong>示例：</strong></p>\n<p>person.hpp 中代码：</p>\n<pre><code class=\"language-C++\">#pragma once\n#include &lt;iostream&gt;\nusing namespace std;\n#include &lt;string&gt;\n\ntemplate&lt;class T1, class T2&gt;\nclass Person &#123;\npublic:\n\tPerson(T1 name, T2 age);\n\tvoid showPerson();\npublic:\n\tT1 m_Name;\n\tT2 m_Age;\n&#125;;\n\n//构造函数 类外实现\ntemplate&lt;class T1, class T2&gt;\nPerson&lt;T1, T2&gt;::Person(T1 name, T2 age) &#123;\n\tthis-&gt;m_Name = name;\n\tthis-&gt;m_Age = age;\n&#125;\n\n//成员函数 类外实现\ntemplate&lt;class T1, class T2&gt;\nvoid Person&lt;T1, T2&gt;::showPerson() &#123;\n\tcout &lt;&lt; &quot;姓名: &quot; &lt;&lt; this-&gt;m_Name &lt;&lt; &quot; 年龄:&quot; &lt;&lt; this-&gt;m_Age &lt;&lt; endl;\n&#125;\n</code></pre>\n<p>类模板分文件编写.cpp 中代码</p>\n<pre><code class=\"language-C++\">#include&lt;iostream&gt;\nusing namespace std;\n\n//#include &quot;person.h&quot;\n#include &quot;person.cpp&quot; //解决方式1，包含cpp源文件\n\n//解决方式2，将声明和实现写到一起，文件后缀名改为.hpp\n#include &quot;person.hpp&quot;\nvoid test01()\n&#123;\n\tPerson&lt;string, int&gt; p(&quot;Tom&quot;, 10);\n\tp.showPerson();\n&#125;\n\nint main() &#123;\n\n\ttest01();\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<p>总结：主流的解决方式是第二种，将类模板成员函数写到一起，并将后缀名改为.hpp</p>\n<h3 id=\"37-类模板和友元\"><a class=\"markdownIt-Anchor\" href=\"#37-类模板和友元\">#</a> 3.7 类模板和友元</h3>\n<p>学习目标：</p>\n<ul>\n<li>掌握类模板配合友元函数的类内和类外实现</li>\n</ul>\n<p>全局函数类内实现 - 直接在类内声明友元即可</p>\n<p>全局函数类外实现 - 需要提前让编译器知道全局函数的存在</p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">#include &lt;string&gt;\n\n//2、全局函数配合友元  类外实现 - 先做函数模板声明，下方在做函数模板定义，在做友元\ntemplate&lt;class T1, class T2&gt; class Person;\n\n//如果声明了函数模板，可以将实现写到后面，否则需要将实现体写到类的前面让编译器提前看到\n//template&lt;class T1, class T2&gt; void printPerson2(Person&lt;T1, T2&gt; &amp; p); \n\ntemplate&lt;class T1, class T2&gt;\nvoid printPerson2(Person&lt;T1, T2&gt; &amp; p)\n&#123;\n\tcout &lt;&lt; &quot;类外实现 ---- 姓名： &quot; &lt;&lt; p.m_Name &lt;&lt; &quot; 年龄：&quot; &lt;&lt; p.m_Age &lt;&lt; endl;\n&#125;\n\ntemplate&lt;class T1, class T2&gt;\nclass Person\n&#123;\n\t//1、全局函数配合友元   类内实现\n\tfriend void printPerson(Person&lt;T1, T2&gt; &amp; p)\n\t&#123;\n\t\tcout &lt;&lt; &quot;姓名： &quot; &lt;&lt; p.m_Name &lt;&lt; &quot; 年龄：&quot; &lt;&lt; p.m_Age &lt;&lt; endl;\n\t&#125;\n\n\n\t//全局函数配合友元  类外实现\n\tfriend void printPerson2&lt;&gt;(Person&lt;T1, T2&gt; &amp; p);\n\npublic:\n\n\tPerson(T1 name, T2 age)\n\t&#123;\n\t\tthis-&gt;m_Name = name;\n\t\tthis-&gt;m_Age = age;\n\t&#125;\n\n\nprivate:\n\tT1 m_Name;\n\tT2 m_Age;\n\n&#125;;\n\n//1、全局函数在类内实现\nvoid test01()\n&#123;\n\tPerson &lt;string, int &gt;p(&quot;Tom&quot;, 20);\n\tprintPerson(p);\n&#125;\n\n\n//2、全局函数在类外实现\nvoid test02()\n&#123;\n\tPerson &lt;string, int &gt;p(&quot;Jerry&quot;, 30);\n\tprintPerson2(p);\n&#125;\n\nint main() &#123;\n\n\t//test01();\n\n\ttest02();\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<p>总结：建议全局函数做类内实现，用法简单，而且编译器可以直接识别</p>\n",
            "tags": []
        },
        {
            "id": "https://empireofyt.github.io/computer-science/cpp/heima/c++%E5%9F%BA%E7%A1%80--%E9%80%9A%E8%AE%AF%E5%BD%95%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/",
            "url": "https://empireofyt.github.io/computer-science/cpp/heima/c++%E5%9F%BA%E7%A1%80--%E9%80%9A%E8%AE%AF%E5%BD%95%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/",
            "title": "c++基础--通讯录管理系统",
            "date_published": "2023-02-02T12:58:57.288Z",
            "content_html": "",
            "tags": []
        },
        {
            "id": "https://empireofyt.github.io/computer-science/cpp/heima/c++%E5%9F%BA%E7%A1%80--%E7%BB%93%E6%9E%84%E4%BD%93/",
            "url": "https://empireofyt.github.io/computer-science/cpp/heima/c++%E5%9F%BA%E7%A1%80--%E7%BB%93%E6%9E%84%E4%BD%93/",
            "title": "c++基础--结构体",
            "date_published": "2023-02-02T12:58:43.249Z",
            "content_html": "<h1 id=\"结构体\"><a class=\"markdownIt-Anchor\" href=\"#结构体\">#</a> 结构体</h1>\n<h3 id=\"1-结构体的定义\"><a class=\"markdownIt-Anchor\" href=\"#1-结构体的定义\">#</a> 1. 结构体的定义</h3>\n<p><strong>语法：</strong> <code>struct 结构体名 &#123; 结构体成员列表 &#125;；</code></p>\n<p>通过结构体创建变量的方式有三种：</p>\n<ul>\n<li>struct 结构体名 变量名</li>\n<li 成员1值=\"\" ，=\"\" 成员2值...=\"\">struct 结构体名 变量名 =</li>\n<li>定义结构体时顺便创建变量</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code>//结构体定义\nstruct student\n&#123;\n\t//成员列表\n\tstring name;  //姓名\n\tint age;      //年龄\n\tint score;    //分数\n&#125;stu3; //结构体变量创建方式3 \n\n\nint main() &#123;\n\n\t//结构体变量创建方式1\n\tstruct student stu1; //struct 关键字可以省略\n\n\tstu1.name = &quot;张三&quot;;\n\tstu1.age = 18;\n\tstu1.score = 100;\n\t\n\tcout &lt;&lt; &quot;姓名：&quot; &lt;&lt; stu1.name &lt;&lt; &quot; 年龄：&quot; &lt;&lt; stu1.age  &lt;&lt; &quot; 分数：&quot; &lt;&lt; stu1.score &lt;&lt; endl;\n\n\t//结构体变量创建方式2\n\tstruct student stu2 = &#123; &quot;李四&quot;,19,60 &#125;;\n\n\tcout &lt;&lt; &quot;姓名：&quot; &lt;&lt; stu2.name &lt;&lt; &quot; 年龄：&quot; &lt;&lt; stu2.age  &lt;&lt; &quot; 分数：&quot; &lt;&lt; stu2.score &lt;&lt; endl;\n\n\n\tstu3.name = &quot;王五&quot;;\n\tstu3.age = 18;\n\tstu3.score = 80;\n\t\n\n\tcout &lt;&lt; &quot;姓名：&quot; &lt;&lt; stu3.name &lt;&lt; &quot; 年龄：&quot; &lt;&lt; stu3.age  &lt;&lt; &quot; 分数：&quot; &lt;&lt; stu3.score &lt;&lt; endl;\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>总结 1：定义结构体时的关键字是 struct，不可省略</p>\n</blockquote>\n<blockquote>\n<p>总结 2：创建结构体变量时，关键字 struct 可以省略</p>\n</blockquote>\n<blockquote>\n<p>总结 3：结构体变量利用操作符 ‘’.’’  访问成员</p>\n</blockquote>\n<h3 id=\"2-结构体数组\"><a class=\"markdownIt-Anchor\" href=\"#2-结构体数组\">#</a> 2 结构体数组</h3>\n<p><strong>语法：</strong>  <code>struct  结构体名 数组名[元素个数] = &#123;  &#123;&#125; , &#123;&#125; , ... &#123;&#125; &#125;</code> <br>\n<strong> 示例：</strong></p>\n<pre><code>//结构体定义\nstruct student\n&#123;\n\t//成员列表\n\tstring name;  //姓名\n\tint age;      //年龄\n\tint score;    //分数\n&#125;\n\nint main() &#123;\n\t\n\t//结构体数组\n\tstruct student arr[3]=\n\t&#123;\n\t\t&#123;&quot;张三&quot;,18,80 &#125;,\n\t\t&#123;&quot;李四&quot;,19,60 &#125;,\n\t\t&#123;&quot;王五&quot;,20,70 &#125;\n\t&#125;;\n\n\tfor (int i = 0; i &lt; 3; i++)\n\t&#123;\n\t\tcout &lt;&lt; &quot;姓名：&quot; &lt;&lt; arr[i].name &lt;&lt; &quot; 年龄：&quot; &lt;&lt; arr[i].age &lt;&lt; &quot; 分数：&quot; &lt;&lt; arr[i].score &lt;&lt; endl;\n\t&#125;\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<h3 id=\"3-结构体指针\"><a class=\"markdownIt-Anchor\" href=\"#3-结构体指针\">#</a> 3 结构体指针</h3>\n<p><strong>作用：</strong> 通过指针访问结构体中的成员</p>\n<blockquote>\n<p>利用操作符  <code>-&gt; </code> 可以通过结构体指针访问结构体属性</p>\n</blockquote>\n<pre><code>//结构体定义\nstruct student\n&#123;\n\t//成员列表\n\tstring name;  //姓名\n\tint age;      //年龄\n\tint score;    //分数\n&#125;;\n\nint main() &#123;\n\t\n\tstruct student stu = &#123; &quot;张三&quot;,18,100, &#125;;\n\t\n\tstruct student * p = &amp;stu;\n\t\n\tp-&gt;score = 80; //指针通过 -&gt; 操作符可以访问成员\n\n\tcout &lt;&lt; &quot;姓名：&quot; &lt;&lt; p-&gt;name &lt;&lt; &quot; 年龄：&quot; &lt;&lt; p-&gt;age &lt;&lt; &quot; 分数：&quot; &lt;&lt; p-&gt;score &lt;&lt; endl;\n\t\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n\n</code></pre>\n<h3 id=\"4-结构体嵌套结构体\"><a class=\"markdownIt-Anchor\" href=\"#4-结构体嵌套结构体\">#</a> 4 结构体嵌套结构体</h3>\n<p>** 作用：** 结构体中的成员可以是另一个结构体</p>\n<pre><code>//学生结构体定义\nstruct student\n&#123;\n\t//成员列表\n\tstring name;  //姓名\n\tint age;      //年龄\n\tint score;    //分数\n&#125;;\n\n//教师结构体定义\nstruct teacher\n&#123;\n    //成员列表\n\tint id; //职工编号\n\tstring name;  //教师姓名\n\tint age;   //教师年龄\n\tstruct student stu; //子结构体 学生\n&#125;;\n\n\nint main() &#123;\n\n\tstruct teacher t1;\n\tt1.id = 10000;\n\tt1.name = &quot;老王&quot;;\n\tt1.age = 40;\n\n\tt1.stu.name = &quot;张三&quot;;\n\tt1.stu.age = 18;\n\tt1.stu.score = 100;\n\n\tcout &lt;&lt; &quot;教师 职工编号： &quot; &lt;&lt; t1.id &lt;&lt; &quot; 姓名： &quot; &lt;&lt; t1.name &lt;&lt; &quot; 年龄： &quot; &lt;&lt; t1.age &lt;&lt; endl;\n\t\n\tcout &lt;&lt; &quot;辅导学员 姓名： &quot; &lt;&lt; t1.stu.name &lt;&lt; &quot; 年龄：&quot; &lt;&lt; t1.stu.age &lt;&lt; &quot; 考试分数： &quot; &lt;&lt; t1.stu.score &lt;&lt; endl;\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<h3 id=\"5-结构体作为函数参数\"><a class=\"markdownIt-Anchor\" href=\"#5-结构体作为函数参数\">#</a> 5 结构体作为函数参数</h3>\n<p><strong>类型：</strong> 1 值传递；   2 地址传递</p>\n<pre><code>//学生结构体定义\nstruct student\n&#123;\n\t//成员列表\n\tstring name;  //姓名\n\tint age;      //年龄\n\tint score;    //分数\n&#125;;\n\n//值传递\nvoid printStudent(student stu )\n&#123;\n\tstu.age = 28;\n\tcout &lt;&lt; &quot;子函数中 姓名：&quot; &lt;&lt; stu.name &lt;&lt; &quot; 年龄： &quot; &lt;&lt; stu.age  &lt;&lt; &quot; 分数：&quot; &lt;&lt; stu.score &lt;&lt; endl;\n&#125;\n\n//地址传递\nvoid printStudent2(student *stu)\n&#123;\n\tstu-&gt;age = 28;\n\tcout &lt;&lt; &quot;子函数中 姓名：&quot; &lt;&lt; stu-&gt;name &lt;&lt; &quot; 年龄： &quot; &lt;&lt; stu-&gt;age  &lt;&lt; &quot; 分数：&quot; &lt;&lt; stu-&gt;score &lt;&lt; endl;\n&#125;\n\nint main() &#123;\n\n\tstudent stu = &#123; &quot;张三&quot;,18,100&#125;;\n\t//值传递\n\tprintStudent(stu);\n\tcout &lt;&lt; &quot;主函数中 姓名：&quot; &lt;&lt; stu.name &lt;&lt; &quot; 年龄： &quot; &lt;&lt; stu.age &lt;&lt; &quot; 分数：&quot; &lt;&lt; stu.score &lt;&lt; endl;\n\n\tcout &lt;&lt; endl;\n\n\t//地址传递\n\tprintStudent2(&amp;stu);\n\tcout &lt;&lt; &quot;主函数中 姓名：&quot; &lt;&lt; stu.name &lt;&lt; &quot; 年龄： &quot; &lt;&lt; stu.age  &lt;&lt; &quot; 分数：&quot; &lt;&lt; stu.score &lt;&lt; endl;\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<h3 id=\"6-结构体中const使用场景\"><a class=\"markdownIt-Anchor\" href=\"#6-结构体中const使用场景\">#</a> 6 结构体中 const 使用场景</h3>\n<p><strong>作用：</strong> 用 const 防止误操作</p>\n<pre><code>//学生结构体定义\nstruct student\n&#123;\n\t//成员列表\n\tstring name;  //姓名\n\tint age;      //年龄\n\tint score;    //分数\n&#125;;\n\n//const使用场景\n//将函数中的形参改为指针，可以减少内存，而且不会幅值新的副本\nvoid printStudent(const student *stu) //加const防止函数体中的误操作\n&#123;\n\t//stu-&gt;age = 100; //操作失败，因为加了const修饰\n\tcout &lt;&lt; &quot;姓名：&quot; &lt;&lt; stu-&gt;name &lt;&lt; &quot; 年龄：&quot; &lt;&lt; stu-&gt;age &lt;&lt; &quot; 分数：&quot; &lt;&lt; stu-&gt;score &lt;&lt; endl;\n\n&#125;\n\nint main() &#123;\n\n\tstudent stu = &#123; &quot;张三&quot;,18,100 &#125;;\n\n\tprintStudent(&amp;stu);\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>将函数中的形参改为指针，可以减少内存，而且不会幅值新的副本</p>\n</blockquote>\n",
            "tags": []
        },
        {
            "id": "https://empireofyt.github.io/computer-science/cpp/heima/c++%E5%9F%BA%E7%A1%80--%E6%8C%87%E9%92%88/",
            "url": "https://empireofyt.github.io/computer-science/cpp/heima/c++%E5%9F%BA%E7%A1%80--%E6%8C%87%E9%92%88/",
            "title": "c++基础--指针",
            "date_published": "2023-02-02T12:57:04.816Z",
            "content_html": "<h1 id=\"指针\"><a class=\"markdownIt-Anchor\" href=\"#指针\">#</a> 指针</h1>\n<h3 id=\"一-指针的大小\"><a class=\"markdownIt-Anchor\" href=\"#一-指针的大小\">#</a> 一 指针的大小</h3>\n<p>32 位下 4 个字节；64 位下 8 个字节</p>\n<h3 id=\"二-const指针\"><a class=\"markdownIt-Anchor\" href=\"#二-const指针\">#</a> 二 const 指针</h3>\n<p>const 修饰指针有三种情况</p>\n<ol>\n<li>const 修饰指针   — 常量指针</li>\n<li>const 修饰常量   — 指针常量</li>\n<li>const 即修饰指针，又修饰常量</li>\n</ol>\n<p><strong>示例：</strong></p>\n<pre><code>int main() &#123;\n\n\tint a = 10;\n\tint b = 10;\n\n\t//const修饰的是指针，指针指向可以改，指针指向的值不可以更改\n\tconst int * p1 = &amp;a; \n\tp1 = &amp;b; //正确\n\t//*p1 = 100;  报错\n\t\n\n\t//const修饰的是常量，指针指向不可以改，指针指向的值可以更改\n\tint * const p2 = &amp;a;\n\t//p2 = &amp;b; //错误\n\t*p2 = 100; //正确\n\n    //const既修饰指针又修饰常量\n\tconst int * const p3 = &amp;a;\n\t//p3 = &amp;b; //错误\n\t//*p3 = 100; //错误\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>技巧：看 const 右侧紧跟着的是指针还是常量，是指针就是常量指针，是常量就是指针常量</p>\n</blockquote>\n",
            "tags": []
        },
        {
            "id": "https://empireofyt.github.io/computer-science/cpp/heima/c++%E5%9F%BA%E7%A1%80--%E5%87%BD%E6%95%B0/",
            "url": "https://empireofyt.github.io/computer-science/cpp/heima/c++%E5%9F%BA%E7%A1%80--%E5%87%BD%E6%95%B0/",
            "title": "c++基础--函数",
            "date_published": "2023-02-02T12:55:12.817Z",
            "content_html": "<h1 id=\"函数\"><a class=\"markdownIt-Anchor\" href=\"#函数\">#</a> 函数</h1>\n<h2 id=\"函数的分文件编写\"><a class=\"markdownIt-Anchor\" href=\"#函数的分文件编写\">#</a> 函数的分文件编写</h2>\n<p>作用： 让代码更清晰</p>\n<p>步骤：</p>\n<ol>\n<li>创建后缀名为.h 的头文件</li>\n<li>创建后缀名为.cpp 的源文件</li>\n<li>在头文件中写函数的声明</li>\n<li>在源文件中写函数的定义</li>\n</ol>\n",
            "tags": []
        },
        {
            "id": "https://empireofyt.github.io/computer-science/github/github/",
            "url": "https://empireofyt.github.io/computer-science/github/github/",
            "title": "github使用教程",
            "date_published": "2023-02-02T08:12:28.457Z",
            "content_html": "<h1 id=\"github使用教程\"><a class=\"markdownIt-Anchor\" href=\"#github使用教程\">#</a> github 使用教程</h1>\n<h2 id=\"一-首次上传此文件夹\"><a class=\"markdownIt-Anchor\" href=\"#一-首次上传此文件夹\">#</a> 一 首次上传此文件夹</h2>\n<h3 id=\"一-github与git连接本地git仓库\"><a class=\"markdownIt-Anchor\" href=\"#一-github与git连接本地git仓库\">#</a> （一） github 与 git 连接–本地 Git 仓库</h3>\n<ol>\n<li>\n<p>本地文件夹</p>\n<ul>\n<li>右键 - Git Bash-</li>\n<li>输入 “git init” 初始化成一个 Git 可管理的仓库</li>\n</ul>\n</li>\n<li>\n<p>将本地文件 add 到 Git 仓库上</p>\n<ul>\n<li>git add .  //. 表示添加该目录下所有文件</li>\n<li>git status // 用来查看仓库状态</li>\n</ul>\n</li>\n<li>\n<p>把项目提交到仓库</p>\n<ul>\n<li>git commit -m &quot; 注释 “”</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"二-github和git连接远程连接\"><a class=\"markdownIt-Anchor\" href=\"#二-github和git连接远程连接\">#</a> （二） github 和 git 连接–远程连接</h3>\n<ol>\n<li>创建 SSH key（只用一次就行了）</li>\n<li>在 github 上新建仓库</li>\n<li>关联远程仓库\n<ul>\n<li>git remote add origin <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL1hYWCVFRiVCQyU4OCVFOCU4NyVBQSVFNSVCNyVCMSVFNCVCQiU5MyVFNSVCQSU5MyVFRiVCQyU4OQ==\">https://github.com/XXX（自己仓库）</span></li>\n</ul>\n</li>\n<li>本地内容上传\n<ul>\n<li>git push (-u) origin main   // 初次上传必须加上 - u</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"二-后续更新上传\"><a class=\"markdownIt-Anchor\" href=\"#二-后续更新上传\">#</a> 二 后续更新上传</h2>\n<ol>\n<li>将本地文件 add 到 Git 仓库上\n<ul>\n<li>git add .  //. 表示添加该目录下所有文件</li>\n</ul>\n</li>\n<li>把项目提交到仓库\n<ul>\n<li>git commit -m &quot; 注释 “”</li>\n</ul>\n</li>\n<li>本地内容上传\n<ul>\n<li>git push (-u) origin main   // 初次上传必须加上 - u</li>\n</ul>\n</li>\n</ol>\n",
            "tags": []
        },
        {
            "id": "https://empireofyt.github.io/computer-science/algorithm/BFS/",
            "url": "https://empireofyt.github.io/computer-science/algorithm/BFS/",
            "title": "BFS",
            "date_published": "2023-02-01T13:52:41.528Z",
            "content_html": "<h2 id=\"应用场景\"><a class=\"markdownIt-Anchor\" href=\"#应用场景\">#</a> 应用场景</h2>\n<p><strong>找到的路径一定是最短的</strong>，但空间复杂度可能大于 DFS</p>\n<h2 id=\"代码框架\"><a class=\"markdownIt-Anchor\" href=\"#代码框架\">#</a> 代码框架</h2>\n<pre><code>//起点 start 到终点 target 的最近距离\nint BFS(Node start, Node target) &#123;\n queue&lt;Node&gt; q; // 核心数据结构\n set&lt;Node&gt; visited; // 避免走回头路   \n q.push(start); // 将起点加入队列\n visited.insert(start);  int step = 0; // 记录扩散的步数 \n while (q not empty) &#123;\n   int sz = q.size();`    \n​    /* 将当前队列中的所有节点向四周扩散 */ \n   for (int i = 0; i &lt; sz; i++) &#123;    \t\n   Node cur = q.front();           \n   q.pop();           \n /* 划重点：这里判断是否到达终点 */ \n   if (cur is target)        return step;   \n\n  /* 将 cur 的相邻节点加入队列 */ \n   for (Node x : cur.adj()) &#123;\n     if (x not in visited) &#123;      \n         q.push(x);  \n         visited.insert(x);     \n     &#125;   \n   &#125;    \n\n​   /* 划重点：更新步数在这里 */\n step++;  \n &#125;\n&#125;</code></pre>\n",
            "tags": [
                "算法"
            ]
        },
        {
            "id": "https://empireofyt.github.io/happy/blog/",
            "url": "https://empireofyt.github.io/happy/blog/",
            "title": "blog",
            "date_published": "2022-08-30T03:24:34.000Z",
            "content_html": "<h1 id=\"blog\"><a class=\"markdownIt-Anchor\" href=\"#blog\">#</a> blog</h1>\n<p>my blog</p>\n",
            "tags": []
        }
    ]
}