<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title> • Posts by &#34;算法&#34; tag</title>
        <link>https://empireofyt.github.io</link>
        <description></description>
        <language>zh-CN</language>
        <pubDate>Wed, 01 Feb 2023 21:52:41 +0800</pubDate>
        <lastBuildDate>Wed, 01 Feb 2023 21:52:41 +0800</lastBuildDate>
        <category>算法</category>
        <item>
            <guid isPermalink="true">https://empireofyt.github.io/computer-science/algorithm/BFS/</guid>
            <title>BFS</title>
            <link>https://empireofyt.github.io/computer-science/algorithm/BFS/</link>
            <category>算法</category>
            <pubDate>Wed, 01 Feb 2023 21:52:41 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;应用场景&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#应用场景&#34;&gt;#&lt;/a&gt; 应用场景&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;找到的路径一定是最短的&lt;/strong&gt;，但空间复杂度可能大于 DFS&lt;/p&gt;
&lt;h2 id=&#34;代码框架&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#代码框架&#34;&gt;#&lt;/a&gt; 代码框架&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;//起点 start 到终点 target 的最近距离
int BFS(Node start, Node target) &amp;#123;
 queue&amp;lt;Node&amp;gt; q; // 核心数据结构
 set&amp;lt;Node&amp;gt; visited; // 避免走回头路   
 q.push(start); // 将起点加入队列
 visited.insert(start);  int step = 0; // 记录扩散的步数 
 while (q not empty) &amp;#123;
   int sz = q.size();`    
​    /* 将当前队列中的所有节点向四周扩散 */ 
   for (int i = 0; i &amp;lt; sz; i++) &amp;#123;    	
   Node cur = q.front();           
   q.pop();           
 /* 划重点：这里判断是否到达终点 */ 
   if (cur is target)        return step;   

  /* 将 cur 的相邻节点加入队列 */ 
   for (Node x : cur.adj()) &amp;#123;
     if (x not in visited) &amp;#123;      
         q.push(x);  
         visited.insert(x);     
     &amp;#125;   
   &amp;#125;    

​   /* 划重点：更新步数在这里 */
 step++;  
 &amp;#125;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
 ]]></description>
        </item>
    </channel>
</rss>
