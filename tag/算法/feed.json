{
    "version": "https://jsonfeed.org/version/1",
    "title": "null • All posts by \"算法\" tag",
    "description": "",
    "home_page_url": "https://empireofyt.github.io",
    "items": [
        {
            "id": "https://empireofyt.github.io/computer-science/algorithm/BFS/",
            "url": "https://empireofyt.github.io/computer-science/algorithm/BFS/",
            "title": "BFS",
            "date_published": "2023-02-01T13:52:41.528Z",
            "content_html": "<h2 id=\"应用场景\"><a class=\"markdownIt-Anchor\" href=\"#应用场景\">#</a> 应用场景</h2>\n<p><strong>找到的路径一定是最短的</strong>，但空间复杂度可能大于 DFS</p>\n<h2 id=\"代码框架\"><a class=\"markdownIt-Anchor\" href=\"#代码框架\">#</a> 代码框架</h2>\n<pre><code>//起点 start 到终点 target 的最近距离\nint BFS(Node start, Node target) &#123;\n queue&lt;Node&gt; q; // 核心数据结构\n set&lt;Node&gt; visited; // 避免走回头路   \n q.push(start); // 将起点加入队列\n visited.insert(start);  int step = 0; // 记录扩散的步数 \n while (q not empty) &#123;\n   int sz = q.size();`    \n​    /* 将当前队列中的所有节点向四周扩散 */ \n   for (int i = 0; i &lt; sz; i++) &#123;    \t\n   Node cur = q.front();           \n   q.pop();           \n /* 划重点：这里判断是否到达终点 */ \n   if (cur is target)        return step;   \n\n  /* 将 cur 的相邻节点加入队列 */ \n   for (Node x : cur.adj()) &#123;\n     if (x not in visited) &#123;      \n         q.push(x);  \n         visited.insert(x);     \n     &#125;   \n   &#125;    \n\n​   /* 划重点：更新步数在这里 */\n step++;  \n &#125;\n&#125;</code></pre>\n",
            "tags": [
                "算法"
            ]
        }
    ]
}